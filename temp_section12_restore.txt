              {/* 12. Device Inventory Tracking Tab */}
              <TabsContent value="device-inventory" className="space-y-6">
                <div className="border rounded-md p-4">
                  <h3 className="font-medium mb-4">12. Device Inventory Tracking</h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    Track and manage your organization's devices to improve security visibility and control.
                  </p>
                  
                  {/* Device Inventory Table Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <div className="flex items-center justify-between mb-4">
                      <h4 className="font-medium">Device Inventory</h4>
                      {editingDeviceIndex !== null ? (
                        <div className="flex space-x-2">
                          <Button 
                            onClick={saveEditedDevice}
                            size="sm"
                            className="bg-green-600 hover:bg-green-700 flex items-center"
                          >
                            <Save className="w-3.5 h-3.5 mr-1" />
                            Save Changes
                          </Button>
                          <Button 
                            onClick={cancelEditing}
                            size="sm"
                            variant="outline"
                            className="text-gray-700 border-gray-300"
                          >
                            <X className="w-3.5 h-3.5 mr-1" />
                            Cancel
                          </Button>
                        </div>
                      ) : (
                        <Button 
                          onClick={addDevice}
                          size="sm"
                          className="bg-purple-600 hover:bg-purple-700"
                        >
                          <Plus className="w-3.5 h-3.5 mr-1" />
                          Add Device
                        </Button>
                      )}
                    </div>
                    
                    <div className="mb-4 border-2 border-blue-200 p-4 rounded-md bg-blue-50">
                      <div className="flex items-center mb-2">
                        <h5 className="text-sm font-medium text-blue-800">Filter Devices</h5>
                        <div className="ml-2 px-2 py-0.5 text-xs bg-blue-600 text-white rounded-full">Filter Tool</div>
                      </div>
                      <p className="text-xs text-blue-700 mb-3">Select a device type to filter the inventory list below</p>
                      <div className="bg-white p-2 rounded border border-blue-200">
                        <Select
                          value={deviceTypeFilter}
                          onValueChange={handleFilterChange}
                        >
                          <SelectTrigger className="w-[200px] bg-white border-blue-300 focus:ring-blue-500">
                            <SelectValue placeholder="Filter by device type" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="all">All Types</SelectItem>
                            <SelectItem value="Workstation">Workstations</SelectItem>
                            <SelectItem value="Laptop">Laptops</SelectItem>
                            <SelectItem value="Mobile Phone">Mobile Devices</SelectItem>
                            <SelectItem value="Server">Servers</SelectItem>
                            <SelectItem value="Network Device">Network Equipment</SelectItem>
                            <SelectItem value="IoT Device">IoT Devices</SelectItem>
                            <SelectItem value="Medical Device">Medical Devices</SelectItem>
                            <SelectItem value="Transportation Device">Transportation Devices</SelectItem>
                            <SelectItem value="Other">Other</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    
                    <div className="rounded-md border overflow-hidden">
                      <div className="grid grid-cols-9 bg-gray-100 p-2 font-medium text-sm">
                        <div>Device Type</div>
                        <div>Make/Model</div>
                        <div>Serial/Asset #</div>
                        <div>Risk Level</div>
                        <div>Owner</div>
                        <div>Operating System</div>
                        <div>MAC Address</div>
                        <div>IP Address</div>
                        <div>Environment</div>
                      </div>
                      
                      {form.getValues('deviceInventory')?.length ? (
                        (deviceTypeFilter === 'all' 
                          ? form.getValues('deviceInventory') 
                          : form.getValues('deviceInventory')?.filter(d => d.deviceType === deviceTypeFilter))
                          .map((device, index) => (
                            <div key={device.id} className="grid grid-cols-9 p-2 border-t text-sm hover:bg-gray-50">
                              <div>{device.deviceType || '—'}</div>
                              <div>{device.makeModel || '—'}</div>
                              <div>{device.serialNumber || '—'}</div>
                              <div>{device.sensitivityLevel || '—'}</div>
                              <div>{device.owner || '—'}</div>
                              <div>{device.operatingSystem || '—'}</div>
                              <div>{device.macAddress || '—'}</div>
                              <div>{device.ipAddress || '—'}</div>
                              <div className="flex items-center justify-between">
                                <span>{device.environment || '—'}</span>
                                <div className="flex space-x-2">
                                  <Button 
                                    variant="outline" 
                                    size="sm"
                                    className="text-blue-600 border-blue-200 hover:bg-blue-50 hover:border-blue-300"
                                    onClick={() => editDevice(index)}
                                  >
                                    <Pencil className="w-3.5 h-3.5 mr-1" />
                                    <span>Edit</span>
                                  </Button>
                                  <Button 
                                    variant="outline" 
                                    size="sm"
                                    className="text-red-600 border-red-200 hover:bg-red-50 hover:border-red-300"
                                    onClick={() => removeDevice(index)}
                                  >
                                    <Trash2 className="w-3.5 h-3.5 mr-1" />
                                    <span>Delete</span>
                                  </Button>
                                </div>
                              </div>
                            </div>
                          ))
                      ) : (
                        <div className="p-4 text-center text-gray-500 text-sm">
                          No devices added yet. Click "Add Device" to begin tracking devices.
                        </div>
                      )}
                    </div>
                    
                    <div className="mt-4 border rounded-md p-4 bg-gray-50">
                      <h5 className="text-sm font-medium mb-2">Import Device Inventory</h5>
                      <p className="text-sm text-muted-foreground mb-3">
                        Use these options to import existing device inventory data or download a template.
                      </p>
                      <div className="grid grid-cols-2 gap-4">
                        <Button 
                          variant="default" 
                          size="default"
                          className="bg-purple-600 hover:bg-purple-700 w-full flex items-center justify-center py-2"
                          onClick={() => {
                            // File input for CSV upload would go here
                            alert('CSV import functionality would be implemented here');
                          }}
                        >
                          <Upload className="mr-2 h-4 w-4" />
                          Import CSV
                        </Button>
                        <Button 
                          variant="outline" 
                          size="default"
                          className="w-full border-gray-300 bg-white hover:bg-gray-50 flex items-center justify-center py-2"
                          onClick={generateCsvTemplate}
                        >
                          <FileSpreadsheet className="mr-2 h-4 w-4" />
                          Download Template
                        </Button>
                      </div>
                    </div>
                  </div>
                  
                  {/* 1. Identification Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">1. Identification</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.deviceId"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Device ID / Asset Tag</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter device ID or asset tag" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.makeModel"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Make / Model</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter device make and model" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.colorDescription"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Color / Physical Description</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter device color or description" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.serialNumber"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Serial Number</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter device serial number" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.owner"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Owner / Assigned User</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter device owner or assigned user" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.deviceNickname"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Device Nickname or Label (if used)</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter device nickname or label" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* Classification Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">2. Classification</h4>
                    <div className="space-y-6">
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.deviceType"
                        render={() => (
                          <FormItem>
                            <div className="mb-4">
                              <FormLabel>Device Type</FormLabel>
                              <FormDescription>
                                Select all that apply
                              </FormDescription>
                            </div>
                            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                              {["Laptop", "Desktop", "Server", "Mobile", "Tablet", "Router", "Switch", "Firewall", "IoT Device", "Smartwatch", "Printer", "Transportation Device", "Other"].map((type) => (
                                <FormField
                                  key={type}
                                  control={form.control}
                                  name="deviceInventoryTracking.deviceType"
                                  render={({ field }) => {
                                    return (
                                      <FormItem
                                        key={type}
                                        className="flex flex-row items-start space-x-3 space-y-0"
                                      >
                                        <FormControl>
                                          <Checkbox
                                            checked={field.value?.includes(type)}
                                            onCheckedChange={(checked) => {
                                              const updatedValue = checked
                                                ? [...(field.value || []), type]
                                                : field.value?.filter(
                                                    (value) => value !== type
                                                  ) || [];
                                              field.onChange(updatedValue);
                                            }}
                                          />
                                        </FormControl>
                                        <FormLabel className="font-normal cursor-pointer">
                                          {type}
                                        </FormLabel>
                                      </FormItem>
                                    );
                                  }}
                                />
                              ))}
                            </div>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.endpointCategory"
                        render={() => (
                          <FormItem>
                            <div className="mb-4">
                              <FormLabel>Endpoint Category</FormLabel>
                              <FormDescription>
                                Select all that apply
                              </FormDescription>
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                              {["User Device", "Shared Asset", "Infrastructure Device", "Monitoring System", "Security Device"].map((type) => (
                                <FormField
                                  key={type}
                                  control={form.control}
                                  name="deviceInventoryTracking.endpointCategory"
                                  render={({ field }) => {
                                    return (
                                      <FormItem
                                        key={type}
                                        className="flex flex-row items-start space-x-3 space-y-0"
                                      >
                                        <FormControl>
                                          <Checkbox
                                            checked={field.value?.includes(type)}
                                            onCheckedChange={(checked) => {
                                              const updatedValue = checked
                                                ? [...(field.value || []), type]
                                                : field.value?.filter(
                                                    (value) => value !== type
                                                  ) || [];
                                              field.onChange(updatedValue);
                                            }}
                                          />
                                        </FormControl>
                                        <FormLabel className="font-normal cursor-pointer">
                                          {type}
                                        </FormLabel>
                                      </FormItem>
                                    );
                                  }}
                                />
                              ))}
                            </div>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.operatingSystem"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Operating System & Version</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter OS and version (e.g., Windows 11, macOS 14.1)" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.browsersInstalled"
                        render={() => (
                          <FormItem>
                            <div className="mb-4">
                              <FormLabel>Browser(s) Installed + Engine</FormLabel>
                              <FormDescription>
                                Select all that apply
                              </FormDescription>
                            </div>
                            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                              {[
                                "Chrome (Chromium)", 
                                "Firefox (Gecko)",
                                "Safari (WebKit)",
                                "Edge (Chromium)",
                                "Opera (Chromium)",
                                "Brave (Chromium)",
                                "Internet Explorer (Trident)"
                              ].map((browser) => (
                                <FormField
                                  key={browser}
                                  control={form.control}
                                  name="deviceInventoryTracking.browsersInstalled"
                                  render={({ field }) => {
                                    return (
                                      <FormItem
                                        key={browser}
                                        className="flex flex-row items-start space-x-3 space-y-0"
                                      >
                                        <FormControl>
                                          <Checkbox
                                            checked={field.value?.includes(browser)}
                                            onCheckedChange={(checked) => {
                                              const updatedValue = checked
                                                ? [...(field.value || []), browser]
                                                : field.value?.filter(
                                                    (value) => value !== browser
                                                  ) || [];
                                              field.onChange(updatedValue);
                                            }}
                                          />
                                        </FormControl>
                                        <FormLabel className="font-normal cursor-pointer">
                                          {browser}
                                        </FormLabel>
                                      </FormItem>
                                    );
                                  }}
                                />
                              ))}
                            </div>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* 3. Network & Location Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">3. Network & Location</h4>
                    <div className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.ipAddress"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>IP Address(es)</FormLabel>
                              <FormControl>
                                <Input placeholder="Enter IP address(es)" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.macAddress"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>MAC Address</FormLabel>
                              <FormControl>
                                <Input placeholder="Enter MAC address" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.environment"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Environment</FormLabel>
                              <Select 
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select environment" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="production">Production</SelectItem>
                                  <SelectItem value="staging">Staging/Testing</SelectItem>
                                  <SelectItem value="development">Development</SelectItem>
                                  <SelectItem value="qa">QA</SelectItem>
                                  <SelectItem value="dr">Disaster Recovery</SelectItem>
                                  <SelectItem value="training">Training</SelectItem>
                                  <SelectItem value="other">Other</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.lastKnownLocation"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Last Known Location</FormLabel>
                              <FormControl>
                                <Input placeholder="Enter location (Office/Room/Geotag)" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.assignedDepartment"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Assigned Department / Business Unit</FormLabel>
                              <FormControl>
                                <Input placeholder="Enter department or business unit" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.networkZone"
                        render={() => (
                          <FormItem>
                            <div className="mb-4">
                              <FormLabel>Network Zone</FormLabel>
                              <FormDescription>
                                Select all that apply
                              </FormDescription>
                            </div>
                            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                              {[
                                "DMZ", 
                                "Internal", 
                                "Guest",
                                "Management",
                                "Secured/Isolated",
                                "IoT Network",
                                "VPN"
                              ].map((zone) => (
                                <FormField
                                  key={zone}
                                  control={form.control}
                                  name="deviceInventoryTracking.networkZone"
                                  render={({ field }) => {
                                    return (
                                      <FormItem
                                        key={zone}
                                        className="flex flex-row items-start space-x-3 space-y-0"
                                      >
                                        <FormControl>
                                          <Checkbox
                                            checked={field.value?.includes(zone)}
                                            onCheckedChange={(checked) => {
                                              const updatedValue = checked
                                                ? [...(field.value || []), zone]
                                                : field.value?.filter(
                                                    (value) => value !== zone
                                                  ) || [];
                                              field.onChange(updatedValue);
                                            }}
                                          />
                                        </FormControl>
                                        <FormLabel className="font-normal cursor-pointer">
                                          {zone}
                                        </FormLabel>
                                      </FormItem>
                                    );
                                  }}
                                />
                              ))}
                            </div>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* 4. Security Posture Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">4. Security Posture</h4>
                    <div className="space-y-6">
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.encryptionStatus"
                        render={() => (
                          <FormItem>
                            <div className="mb-4">
                              <FormLabel>Encryption Status</FormLabel>
                              <FormDescription>
                                Select all that apply
                              </FormDescription>
                            </div>
                            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                              {[
                                "Full Disk Encryption", 
                                "File-Level Encryption",
                                "Removable Media Encryption",
                                "No Encryption",
                                "Partial Encryption",
                                "Unknown"
                              ].map((status) => (
                                <FormField
                                  key={status}
                                  control={form.control}
                                  name="deviceInventoryTracking.encryptionStatus"
                                  render={({ field }) => {
                                    return (
                                      <FormItem
                                        key={status}
                                        className="flex flex-row items-start space-x-3 space-y-0"
                                      >
                                        <FormControl>
                                          <Checkbox
                                            checked={field.value?.includes(status)}
                                            onCheckedChange={(checked) => {
                                              const updatedValue = checked
                                                ? [...(field.value || []), status]
                                                : field.value?.filter(
                                                    (value) => value !== status
                                                  ) || [];
                                              field.onChange(updatedValue);
                                            }}
                                          />
                                        </FormControl>
                                        <FormLabel className="font-normal cursor-pointer">
                                          {status}
                                        </FormLabel>
                                      </FormItem>
                                    );
                                  }}
                                />
                              ))}
                            </div>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.antivirusInstalled"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Antivirus / EDR Installed?</FormLabel>
                                <FormDescription>
                                  Check if antivirus or endpoint detection and response is installed
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.firewallActive"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Firewall Active?</FormLabel>
                                <FormDescription>
                                  Check if device firewall is active
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.tpmPresent"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>TPM Present?</FormLabel>
                                <FormDescription>
                                  Check if Trusted Platform Module is present
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.patchStatus"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Patch Status (OS, App, Firmware)</FormLabel>
                              <Select 
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select patch status" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="fully-patched">Fully Patched</SelectItem>
                                  <SelectItem value="patched-critical">Critical Patches Only</SelectItem>
                                  <SelectItem value="out-of-date">Out of Date</SelectItem>
                                  <SelectItem value="unknown">Unknown</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.vpnMdmEnrollment"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>VPN Usage / MDM Enrollment?</FormLabel>
                                <FormDescription>
                                  Check if device uses VPN or is enrolled in Mobile Device Management
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.securityComplianceLevel"
                        render={() => (
                          <FormItem>
                            <div className="mb-4">
                              <FormLabel>Security Compliance Level</FormLabel>
                              <FormDescription>
                                Select all that apply
                              </FormDescription>
                            </div>
                            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                              {[
                                "HIPAA", 
                                "CMMC",
                                "ISO 27001",
                                "NIST 800-171",
                                "SOC 2",
                                "PCI DSS",
                                "GDPR",
                                "FISMA",
                                "None"
                              ].map((compliance) => (
                                <FormField
                                  key={compliance}
                                  control={form.control}
                                  name="deviceInventoryTracking.securityComplianceLevel"
                                  render={({ field }) => {
                                    return (
                                      <FormItem
                                        key={compliance}
                                        className="flex flex-row items-start space-x-3 space-y-0"
                                      >
                                        <FormControl>
                                          <Checkbox
                                            checked={field.value?.includes(compliance)}
                                            onCheckedChange={(checked) => {
                                              const updatedValue = checked
                                                ? [...(field.value || []), compliance]
                                                : field.value?.filter(
                                                    (value) => value !== compliance
                                                  ) || [];
                                              field.onChange(updatedValue);
                                            }}
                                          />
                                        </FormControl>
                                        <FormLabel className="font-normal cursor-pointer">
                                          {compliance}
                                        </FormLabel>
                                      </FormItem>
                                    );
                                  }}
                                />
                              ))}
                            </div>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* 5. Lifecycle Management Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">5. Lifecycle Management</h4>
                    <div className="space-y-6">
                      <div className="space-y-4">
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.disposalLocation"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Disposal/Decommission Location</FormLabel>
                              <Select 
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select disposal location" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="recycling-center">Recycling Center</SelectItem>
                                  <SelectItem value="manufacturer-return">Manufacturer Return Program</SelectItem>
                                  <SelectItem value="certified-disposal">Certified Disposal Facility</SelectItem>
                                  <SelectItem value="third-party-reseller">Third-Party Reseller</SelectItem>
                                  <SelectItem value="internal-repurpose">Internal Repurposing</SelectItem>
                                  <SelectItem value="employee-purchase">Employee Purchase Program</SelectItem>
                                  <SelectItem value="destruction-service">Destruction Service</SelectItem>
                                  <SelectItem value="storage-facility">Long-term Storage Facility</SelectItem>
                                  <SelectItem value="other">Other (Specify in Notes)</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.custodyOrganization"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Handling Company/Organization</FormLabel>
                              <FormControl>
                                <Input
                                  placeholder="Enter specific company name (e.g., Each1Teach1 Tech)"
                                  {...field}
                                />
                              </FormControl>
                              <FormDescription className="text-xs">
                                Enter the specific company handling the disposal/recycling
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="deviceInventoryTracking.dataSanitization"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Data Sanitization Method</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select data sanitization method" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="secure-erasure">Secure Erasure (Software Wipe)</SelectItem>
                                <SelectItem value="physical-destruction">Physical Destruction</SelectItem>
                                <SelectItem value="degaussing">Degaussing</SelectItem>
                                <SelectItem value="cryptographic-erasure">Cryptographic Erasure</SelectItem>
                                <SelectItem value="factory-reset">Factory Reset</SelectItem>
                                <SelectItem value="certified-sanitization">Certified Sanitization Service</SelectItem>
                                <SelectItem value="none">None</SelectItem>
                                <SelectItem value="unknown">Unknown</SelectItem>
                                <SelectItem value="other">Other (Specify in Notes)</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                      
                  {/* 6. Usage & Monitoring Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">6. Usage & Monitoring</h4>
                    <div className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.lastLoginDate"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Last Login Date</FormLabel>
                              <FormControl>
                                <Input type="date" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.lastNetworkCheckin"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Last Network Check-in</FormLabel>
                              <FormControl>
                                <Input type="date" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.deviceStatus"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Device Activity / Status</FormLabel>
                              <Select 
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select device status" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="active">Active</SelectItem>
                                  <SelectItem value="inactive">Inactive</SelectItem>
                                  <SelectItem value="in-repair">In Repair</SelectItem>
                                  <SelectItem value="retired">Retired</SelectItem>
                                  <SelectItem value="lost-stolen">Lost/Stolen</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.deviceRiskScore"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Device Risk Score (Optional)</FormLabel>
                              <FormDescription>
                                If available from your SIEM/EDR, enter a risk score from 0-100
                              </FormDescription>
                              <FormControl>
                                <Input 
                                  type="number" 
                                  min="0" 
                                  max="100" 
                                  placeholder="Enter risk score (0-100)"
                                  {...field}
                                  onChange={e => {
                                    const value = e.target.value === '' ? undefined : Number(e.target.value);
                                    field.onChange(value);
                                  }}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                    </div>
                  </div>
                  
                  {/* 6. Lifecycle & Ownership Section */}
                  <div className="border-2 border-yellow-200 rounded-md p-4 mb-6 bg-yellow-50">
                    <div className="flex items-center mb-2">
                      <h4 className="font-medium text-yellow-800">6. Lifecycle & Ownership</h4>
                      <div className="ml-2 px-2 py-0.5 text-xs bg-yellow-600 text-white rounded-full">Maintenance</div>
                    </div>
                    <p className="text-xs text-yellow-700 mb-3">Track procurement, warranty, and management details</p>
                    <div className="space-y-6 bg-white p-3 border border-yellow-200 rounded-md">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.procurementDate"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Procurement Date / Vendor</FormLabel>
                              <FormControl>
                                <Input placeholder="Enter procurement date and vendor" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.warrantyExpiration"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Warranty Expiration</FormLabel>
                              <FormControl>
                                <Input type="date" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.deviceLifecycleStatus"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Device Lifecycle Status</FormLabel>
                              <Select 
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select lifecycle status" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="in-use">In Use</SelectItem>
                                  <SelectItem value="in-storage">In Storage</SelectItem>
                                  <SelectItem value="decommissioned">Decommissioned</SelectItem>
                                  <SelectItem value="pending-disposal">Pending Disposal</SelectItem>
                                  <SelectItem value="disposed">Disposed</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="deviceInventoryTracking.disposalLocation"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Disposal/Decommission Location</FormLabel>
                              <Select 
                                onValueChange={field.onChange}
