              <TabsContent value="identity-behavior" className="space-y-6">
                <div className="border rounded-md p-4">
                  <h3 className="font-medium mb-4">13. Identity Behavior & Hygiene</h3>
                  <p className="text-sm text-muted-foreground mb-4">
                    Track and manage identity behaviors, authentication practices, and security hygiene measures.
                  </p>
                  
                  {/* Universal Identity Verification System (UIVS) Section */}
                  <div className="border rounded-md p-4 mb-6 bg-blue-50">
                    <h4 className="font-medium text-blue-700 mb-2">Universal Identity Verification System (UIVS)</h4>
                    <p className="text-sm mb-4">
                      For organizations with multiple users, we recommend using our Identity Management system to import and manage all your users in one place with our patented Universal Identity Verification System (UIVS).
                    </p>
                    <div className="flex flex-wrap gap-3">
                      <Button 
                        type="button" 
                        variant="default" 
                        size="sm"
                        className="bg-blue-600 hover:bg-blue-700 text-white"
                        onClick={(e) => {
                          e.preventDefault();
                          window.location.href = "/identity-management";
                        }}
                      >
                        <UserPlus className="w-4 h-4 mr-2" /> Manage User Identities
                      </Button>
                      <Button 
                        type="button" 
                        variant="default" 
                        size="sm"
                        className="bg-blue-600 hover:bg-blue-700 text-white flex items-center gap-2"
                        onClick={(e) => {
                          e.preventDefault();
                          // Download the user identity template CSV
                          const csvHeader = "user_id,first_name,last_name,email,role,department,identity_type,access_level,government_id_type,government_id_issuing_authority,mfa_enabled,mfa_type,location,manager,employment_status,last_password_change,last_security_training,system_access,typical_login_hours,login_anomaly_threshold,inactive_account_days,credential_exposure_check,session_timeout_minutes,privilege_escalation_alerts,federation_source";
                          
                          // Sample data rows provided in the template
                          const sampleData = [
                            "EMP001,John,Smith,john.smith@example.com,IT Manager,Information Technology,human,privileged,drivers_license,NY-DMV,yes,app+sms,Headquarters,jane.doe@example.com,Full Time,2025-04-15,2025-03-01,\"ERP, CRM, IT Admin Portal\",9:00-17:00,medium,30,yes,60,yes,Active Directory",
                            "EMP002,Sarah,Johnson,sarah.johnson@example.com,Finance Director,Finance,human,admin,state_id,CA-DMV,yes,hardware,Headquarters,executive@example.com,Full Time,2025-04-20,2025-03-01,\"ERP, Finance Portal, Expense System\",8:00-18:00,high,30,yes,30,yes,Okta SSO",
                            "SVC001,Backup,Service,backup-service@system.internal,Automated Process,Operations,machine,standard,not_applicable,not_applicable,no,,Data Center,john.smith@example.com,System,2025-01-15,N/A,\"Backup System, Storage Access\",,low,365,no,0,yes,Local",
                            "API001,Payment,Gateway,api-monitor@example.com,External Service,Finance,api,limited,not_applicable,not_applicable,yes,api-key,Cloud,sarah.johnson@example.com,Service,2025-03-30,N/A,\"Payment Processing System\",,high,90,yes,15,yes,AWS IAM",
                            "VEN001,Tech Support,Inc.,support@techsupport.example.com,Technical Support,External,third-party,limited,passport,US-State-Dept,yes,app,Remote,john.smith@example.com,Vendor,2025-04-01,2025-02-15,\"Ticketing System, Knowledge Base\",9:00-20:00,medium,45,yes,20,yes,External IDP"
                          ];
                          
                          const csvContent = csvHeader + "\n" + sampleData.join("\n");
                          const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                          const url = URL.createObjectURL(blob);
                          const link = document.createElement('a');
                          link.setAttribute('href', url);
                          link.setAttribute('download', 'user-identity-template.csv');
                          document.body.appendChild(link);
                          link.click();
                          document.body.removeChild(link);
                        }}
                      >
                        <FileDown className="w-4 h-4 mr-2" /> Download Template
                      </Button>
                    </div>
                    
                    {/* Components section removed as requested */}
                    <div className="mt-4">

                        {/* UWA Matrix Form */}
                        <div className="p-4 border rounded-md mb-4 bg-muted/10">
                          <h5 className="text-sm font-medium mb-3">UWA Component Selection Matrix</h5>
                          <p className="text-xs text-muted-foreground mb-3">
                            Select the components needed for your UWA intermediate representation. Required fields depend on identity type.
                            Organizations can customize which fields to include in their UWA generation based on their specific needs.
                          </p>
                          <div className="flex items-center gap-2 mb-3">
                            <AlertCircle className="h-4 w-4 text-amber-500" />
                            <p className="text-xs text-amber-500">
                              The matrix below shows an example configuration. All 31 identity components can be used to create a customized UWA.
                            </p>
                          </div>
                          
                          <div className="overflow-x-auto">
                            <table className="w-full text-sm border">
                              <thead className="bg-muted/50">
                                <tr>
                                  <th className="py-2 px-3 text-left font-medium text-xs border-r">Components of Identification</th>
                                  <th className="py-2 px-3 text-left font-medium text-xs border-r">Human</th>
                                  <th className="py-2 px-3 text-left font-medium text-xs border-r">Machine</th>
                                  <th className="py-2 px-3 text-left font-medium text-xs border-r">API</th>
                                  <th className="py-2 px-3 text-left font-medium text-xs">Third-Party</th>
                                </tr>
                              </thead>
                              <tbody className="divide-y">
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Name</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true} 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      checked={true} 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Address</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true} 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      checked={true} 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Birthplace</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true} 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      disabled 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      disabled 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      disabled 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Date of Birth</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      disabled 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      disabled 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      disabled 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">PIN</td>
                                  <td className="py-2 px-3 border-r">
                                    <div className="flex items-center">
                                      <Checkbox 
                                        disabled 
                                        className="data-[state=checked]:bg-primary" 
                                      />
                                      <span className="ml-2 text-xs text-red-500">Not used for UWA</span>
                                    </div>
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <div className="flex items-center">
                                      <Checkbox 
                                        disabled 
                                        className="data-[state=checked]:bg-primary" 
                                      />
                                      <span className="ml-2 text-xs text-red-500">Not used for UWA</span>
                                    </div>
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <div className="flex items-center">
                                      <Checkbox 
                                        disabled 
                                        className="data-[state=checked]:bg-primary" 
                                      />
                                      <span className="ml-2 text-xs text-red-500">Not used for UWA</span>
                                    </div>
                                  </td>
                                  <td className="py-2 px-3">
                                    <div className="flex items-center">
                                      <Checkbox 
                                        disabled 
                                        className="data-[state=checked]:bg-primary" 
                                      />
                                      <span className="ml-2 text-xs text-red-500">Not used for UWA</span>
                                    </div>
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">SN/IMEI</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Ph#/EIN/SSN/BVN</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Driver License/Passport</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      disabled
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      disabled
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Primary Auth Device IMEI/IOT S/N</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Make/Model+OS</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Manufacturing Date (DOM)</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">EC2/DO ID/MAC/SN</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">OS</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">UUID</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Server ID</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Environment (PR/ST/TD)</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">IP Address</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Business Certifications</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Business Licenses</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                                <tr className="hover:bg-muted/5">
                                  <td className="py-2 px-3 border-r font-medium">Utility Bills</td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3 border-r">
                                    <Checkbox 
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                  <td className="py-2 px-3">
                                    <Checkbox 
                                      checked={true}
                                      className="data-[state=checked]:bg-primary" 
                                    />
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </div>
                          
                          <div className="mt-3">
                            <div className="flex flex-col gap-2">
                              <h6 className="text-xs font-medium">Selected Identity Matrix Fields</h6>
                              <div className="bg-blue-50 border border-blue-200 rounded-md p-3 mb-2">
                                <div className="flex items-start">
                                  <div className="text-blue-500 mr-2 mt-0.5">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-info"><circle cx="12" cy="12" r="10"/><path d="M12 16v-4"/><path d="M12 8h.01"/></svg>
                                  </div>
                                  <div>
                                    <p className="text-xs font-medium text-blue-800">Advanced Feature - Universal Wallet Address (UWA)</p>
                                    <p className="text-xs text-blue-700 mt-1">
                                      The UWA system is an optional advanced identity feature that organizations can integrate as their security posture matures. This preview demonstrates how selected identity components are transformed into secure, portable identifiers across your infrastructure.
                                    </p>
                                  </div>
                                </div>
                              </div>
                              <p className="text-xs text-muted-foreground">
                                The UWA (Universal Wallet Address) will be generated using the fields marked above
                              </p>
                              
                              <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="p-3 border rounded-md">
                                  <h6 className="text-xs font-medium mb-2">UWA Templates by Identity Type</h6>
                                  <div className="flex flex-col gap-2">
                                    <div className="flex items-center justify-between">
                                      <Button 
                                        size="sm" 
                                        variant={form.watch('identityBehaviorHygiene.selectedIdentityType') === 'Human' ? 'default' : 'outline'} 
                                        className="text-xs w-full justify-start"
                                        onClick={() => {
                                          form.setValue('identityBehaviorHygiene.selectedIdentityType', 'Human');
                                        }}
                                      >
                                        <span className="mr-1">🧑</span> Human UWA Template
                                      </Button>
                                      <TooltipProvider>
                                        <Tooltip>
                                          <TooltipTrigger>
                                            <HelpCircle className="h-3 w-3 text-muted-foreground" />
                                          </TooltipTrigger>
                                          <TooltipContent>
                                            <p className="w-80 text-xs">Human UWA uses driver license, biometrics, and other personal identifiers</p>
                                          </TooltipContent>
                                        </Tooltip>
                                      </TooltipProvider>
                                    </div>
                                    <div className="flex items-center justify-between">
                                      <Button
                                        size="sm"
                                        variant={form.watch('identityBehaviorHygiene.selectedIdentityType') === 'Machine' ? 'default' : 'outline'}
                                        className="text-xs w-full justify-start"
                                        onClick={() => {
                                          form.setValue('identityBehaviorHygiene.selectedIdentityType', 'Machine');
                                        }}
                                      >
                                        <span className="mr-1">💻</span> Machine UWA Template
                                      </Button>
                                      <TooltipProvider>
                                        <Tooltip>
                                          <TooltipTrigger>
                                            <HelpCircle className="h-3 w-3 text-muted-foreground" />
                                          </TooltipTrigger>
                                          <TooltipContent>
                                            <p className="w-80 text-xs">For cloud machines: UUID + Environment + Location + OS</p>
                                            <p className="w-80 text-xs">For physical devices: IMEI/MAC/SN</p>
                                          </TooltipContent>
                                        </Tooltip>
                                      </TooltipProvider>
                                    </div>
                                    <div className="flex items-center justify-between">
                                      <Button 
                                        size="sm" 
                                        variant={form.watch('identityBehaviorHygiene.selectedIdentityType') === 'API' ? 'default' : 'outline'} 
                                        className="text-xs w-full justify-start"
                                        onClick={() => {
                                          form.setValue('identityBehaviorHygiene.selectedIdentityType', 'API');
                                        }}
                                      >
                                        <span className="mr-1">⚙️</span> API UWA Template
                                      </Button>
                                      <TooltipProvider>
                                        <Tooltip>
                                          <TooltipTrigger>
                                            <HelpCircle className="h-3 w-3 text-muted-foreground" />
                                          </TooltipTrigger>
                                          <TooltipContent>
                                            <p className="w-80 text-xs">API UWA uses digital signatures and certificates</p>
                                          </TooltipContent>
                                        </Tooltip>
                                      </TooltipProvider>
                                    </div>
                                    <div className="flex items-center justify-between">
                                      <Button 
                                        size="sm" 
                                        variant={form.watch('identityBehaviorHygiene.selectedIdentityType') === 'Third-Party' ? 'default' : 'outline'} 
                                        className="text-xs w-full justify-start"
                                        onClick={() => {
                                          form.setValue('identityBehaviorHygiene.selectedIdentityType', 'Third-Party');
                                        }}
                                      >
                                        <span className="mr-1">🏢</span> Third-Party UWA Template
                                      </Button>
                                      <TooltipProvider>
                                        <Tooltip>
                                          <TooltipTrigger>
                                            <HelpCircle className="h-3 w-3 text-muted-foreground" />
                                          </TooltipTrigger>
                                          <TooltipContent>
                                            <p className="w-80 text-xs">Third-Party UWA uses business credentials and certifications</p>
                                          </TooltipContent>
                                        </Tooltip>
                                      </TooltipProvider>
                                    </div>
                                  </div>
                                  
                                  <div className="mt-4 p-3 border rounded-md bg-slate-50">
                                    <h6 className="text-sm font-medium mb-2 flex items-center">
                                      <Server className="h-4 w-4 mr-1.5" /> 
                                      Machine Type for UWA Generation
                                    </h6>
                                    <div className="flex flex-wrap gap-2 mb-3">
                                      <Button 
                                        size="sm" 
                                        variant={form.watch('identityBehaviorHygiene.machineType') === 'cloud' ? 'default' : 'outline'} 
                                        className={`text-xs ${form.watch('identityBehaviorHygiene.machineType') === 'cloud' ? 'border-blue-300 bg-blue-50 hover:bg-blue-100' : ''}`}
                                        onClick={() => {
                                          form.setValue('identityBehaviorHygiene.machineType', 'cloud');
                                          // Update Custom UWA inputs to match cloud server format
                                          setCustomUwaInputs({
                                            ...customUwaInputs,
                                            // Reset to cloud server defaults
                                            instanceUUID: "1c-49ca-47ae-bebe-4087c52abbf4",
                                            environment: "PR",
                                            address: "2X57+XH+",
                                            osName: "centosl",
                                            // Clear physical device identifiers that don't apply to cloud servers
                                            imei: "",
                                            macAddress: "",
                                            serialNumber: ""
                                          });
                                        }}
                                        disabled={form.watch('identityBehaviorHygiene.selectedIdentityType') !== 'Machine'}
                                      >
                                        <Monitor className="h-3 w-3 mr-1" /> Virtual Machine
                                      </Button>
                                      <Button 
                                        size="sm" 
                                        variant={form.watch('identityBehaviorHygiene.machineType') === 'physical' ? 'default' : 'outline'} 
                                        className={`text-xs ${form.watch('identityBehaviorHygiene.machineType') === 'physical' ? 'border-emerald-400 bg-emerald-50 hover:bg-emerald-100 text-emerald-800' : ''}`}
                                        onClick={() => {
                                          form.setValue('identityBehaviorHygiene.machineType', 'physical');
                                          // Update Custom UWA inputs to match physical device format
                                          setCustomUwaInputs({
                                            ...customUwaInputs,
                                            // Reset to physical device defaults
                                            imei: "990000862471854",
                                            macAddress: "00:1B:44:11:3A:B7",
                                            serialNumber: "SN-2024-001",
                                            deviceModel: "PowerEdge R740"
                                          });
                                        }}
                                        disabled={form.watch('identityBehaviorHygiene.selectedIdentityType') !== 'Machine'}
                                      >
                                        <Cpu className="h-3 w-3 mr-1" /> Physical Device
                                      </Button>
                                    </div>
                                    
                                    {/* Display machine type-specific help text */}
                                    {form.watch('identityBehaviorHygiene.machineType') === 'cloud' && (
                                      <div className="px-2 py-1.5 bg-blue-50 border border-blue-100 rounded text-xs mb-2">
                                        <p className="text-blue-700 font-medium">Virtual UWA Format (VM):</p>
                                        <p className="text-blue-600">Uses InstanceUUID + Environment + Address + OSname</p>
                                        <div className="mt-1.5 text-blue-700 flex items-center text-[10px]">
                                          <Info className="h-3 w-3 mr-1" /> Uses instance identifiers instead of hardware identifiers
                                        </div>
                                      </div>
                                    )}
                                    
                                    {form.watch('identityBehaviorHygiene.machineType') === 'physical' && (
                                      <div className="px-2 py-1.5 bg-emerald-50 border border-emerald-200 rounded text-xs mb-2">
                                        <p className="text-emerald-800 font-medium">Physical Device UWA Format:</p>
                                        <p className="text-emerald-700">Uses IMEI/MAC/Serial Number and other device identifiers</p>
                                        <div className="mt-1.5 text-emerald-800 flex items-center text-[10px]">
                                          <Info className="h-3 w-3 mr-1" /> Distinct from virtual UWAs - uses hardware identifiers instead of Instance UUID
                                        </div>
                                      </div>
                                    )}
                                  </div>
                                </div>
                                
                                <div className="p-3 border rounded-md">
                                  <h6 className="text-xs font-medium mb-2">UWA Generation Preview</h6>
                                  <div className="flex flex-col gap-2">
                                    {(() => {
                                      const identityType = form.watch('identityBehaviorHygiene.selectedIdentityType') || 'Machine';
                                      const machineType = form.watch('identityBehaviorHygiene.machineType') || 'cloud';
                                      
                                      // Different UWA generation based on identity type
                                      if (identityType === 'Machine') {
                                        if (machineType === 'cloud') {
                                          // Cloud Machine UWA Generation
                                          
                                          // Sample data for demonstration
                                          const instanceUUID = "1c-49ca-47ae-bebe-4087c52abbf4";
                                          const environment = "PR"; // Production
                                          const address = "2X57+XH+"; // Google open location
                                          const osName = "centosl"; // OS name
                                          
                                          // 1. Extract components according to formula
                                          const last26UUID = instanceUUID.slice(-26);  // Last 26 chars of UUID
                                          const first2Env = environment.slice(0, 2);   // First 2 chars of environment
                                          const last7Address = address.slice(-7);      // Last 7 chars of Google location
                                          const first7OS = osName.slice(0, 7);         // First 7 chars of OS name
                                          
                                          // 2. Concatenate in the specified sequence
                                          // Formula: Last26InstanceUUID + First2Env + Last7Address + First7OSname
                                          const rawUWA = last26UUID + first2Env + last7Address + first7OS;
                                          
                                          // 3. Rearrange with prefix and 7-character chunking for readability
                                          // Start with CLX prefix, then first2Env, then chunk the rest into 7-character segments
                                          const formattedUWA = generateCloudUwa(instanceUUID, environment, address, osName);
                                          
                                          return (
                                            <>
                                              <div className="flex items-center justify-between">
                                                <p className="text-xs font-medium">
                                                  Selected template: <span className="text-primary">Machine UWA (Virtual Machine)</span>
                                                </p>
                                              </div>
                                              <div className="mt-2 p-2 bg-muted rounded border text-xs font-mono">
                                                <p><span className="font-semibold">Instance UUID:</span> {instanceUUID}</p>
                                                <p><span className="font-semibold">Environment:</span> {environment}</p>
                                                <p><span className="font-semibold">Address:</span> {address}</p>
                                                <p><span className="font-semibold">OS Name:</span> {osName}</p>
                                              </div>
                                              <div className="mt-2 p-2 bg-green-50 rounded border border-green-200 text-xs">
                                                <div className="flex items-center justify-between">
                                                  <p className="font-semibold text-green-700">Generated UWA:</p>
                                                  <Button 
                                                    size="sm" 
                                                    variant="outline" 
                                                    className="h-6 py-0 px-2 text-xs"
                                                    onClick={() => {
                                                      navigator.clipboard.writeText(formattedUWA).then(() => {
                                                        alert("UWA copied to clipboard!");
                                                      }).catch(err => {
                                                        console.error('Could not copy text: ', err);
                                                      });
                                                    }}
                                                  >
                                                    <Copy className="h-3 w-3 mr-1" /> Copy
                                                  </Button>
                                                </div>
                                                <p className="font-mono text-green-800 mt-1 break-all">{formattedUWA}</p>
                                              </div>
                                              <div className="mt-2 text-xs text-muted-foreground">
                                                <p>Algorithm: Last26InstanceUUID + First2Env + Last7Address + First7OSname</p>
                                                <p>Formatted in 7-character chunks for readability</p>
                                              </div>
                                              
                                              <div className="mt-3 border-t pt-3">
                                                <h6 className="text-xs font-medium mb-2">
                                                  Generate Your Own UWA 
                                                  <span className="ml-2 text-primary">
                                                    ({form.watch('identityBehaviorHygiene.machineType') === 'cloud' ? 'Cloud Server' : 'Physical Device'})
                                                  </span>
                                                </h6>
                                                
                                                {/* Form fields based on machine type */}
                                                {form.watch('identityBehaviorHygiene.machineType') === 'cloud' ? (
                                                  <div>
                                                    <div className="grid grid-cols-2 gap-2">
                                                      <div>
                                                        <label className="text-xs font-medium">Instance UUID</label>
                                                        <Input 
                                                          className="mt-1 text-xs h-8" 
                                                          placeholder="e.g., 1c-49ca-47ae-bebe-4087c52abbf4"
                                                          value={customUwaInputs.instanceUUID}
                                                          onChange={(e) => {
                                                            setCustomUwaInputs({
                                                              ...customUwaInputs,
                                                              instanceUUID: e.target.value
                                                            });
                                                          }}
                                                        />
                                                      </div>
                                                      <div>
                                                        <label className="text-xs font-medium">Environment</label>
                                                        <Select 
                                                          defaultValue={customUwaInputs.environment}
                                                          onValueChange={(value) => {
                                                            setCustomUwaInputs({
                                                              ...customUwaInputs,
                                                              environment: value
                                                            });
                                                          }}
                                                        >
                                                          <SelectTrigger className="mt-1 text-xs h-8">
                                                            <SelectValue placeholder="Select environment" />
                                                          </SelectTrigger>
                                                          <SelectContent>
                                                            <SelectItem value="PR">Production (PR)</SelectItem>
                                                            <SelectItem value="ST">Staging (ST)</SelectItem>
                                                            <SelectItem value="DV">Development (DV)</SelectItem>
                                                            <SelectItem value="TS">Test (TS)</SelectItem>
                                                          </SelectContent>
                                                        </Select>
                                                      </div>
                                                      <div>
                                                        <label className="text-xs font-medium">Google Location</label>
                                                        <Input 
                                                          className="mt-1 text-xs h-8" 
                                                          placeholder="e.g., 2X57+XH+"
                                                          value={customUwaInputs.address}
                                                          onChange={(e) => {
                                                            setCustomUwaInputs({
                                                              ...customUwaInputs,
                                                              address: e.target.value
                                                            });
                                                          }}
                                                        />
                                                      </div>
                                                      <div>
                                                        <label className="text-xs font-medium">OS Name</label>
                                                        <Input 
                                                          className="mt-1 text-xs h-8" 
                                                          placeholder="e.g., centosl"
                                                          value={customUwaInputs.osName}
                                                          onChange={(e) => {
                                                            setCustomUwaInputs({
                                                              ...customUwaInputs,
                                                              osName: e.target.value
                                                            });
                                                          }}
                                                        />
                                                      </div>
                                                    </div>
                                                    
                                                    <Button 
                                                      size="sm" 
                                                      className="mt-2 text-xs" 
                                                      variant="default"
                                                      onClick={() => {
                                                        // Generate UWA from custom inputs using our helper function
                                                        const formattedCustomUwa = generateCloudUwa(
                                                          customUwaInputs.instanceUUID,
                                                          customUwaInputs.environment,
                                                          customUwaInputs.address,
                                                          customUwaInputs.osName
                                                        );
                                                        
                                                        // Set the generated UWA and show it
                                                        setGeneratedUwa(formattedCustomUwa);
                                                        setShowGeneratedUwa(true);
                                                        
                                                        // Try to copy to clipboard automatically
                                                        try {
                                                          navigator.clipboard.writeText(formattedCustomUwa);
                                                        } catch (err) {
                                                          console.error('Could not copy text: ', err);
                                                        }
                                                      }}
                                                    >
                                                      <Save className="h-3 w-3 mr-1" /> Generate Cloud UWA
                                                    </Button>
                                                  </div>
                                                ) : (
                                                  <div>
                                                    <div className="grid grid-cols-2 gap-2">
                                                      <div>
                                                        <label className="text-xs font-medium">IMEI</label>
                                                        <Input 
                                                          className="mt-1 text-xs h-8" 
                                                          placeholder="e.g., 990000862471854"
                                                          value={customUwaInputs.imei || ''}
                                                          onChange={(e) => {
                                                            setCustomUwaInputs({
                                                              ...customUwaInputs,
                                                              imei: e.target.value
                                                            });
                                                          }}
                                                        />
                                                      </div>
                                                      <div>
                                                        <label className="text-xs font-medium">MAC Address</label>
                                                        <Input 
                                                          className="mt-1 text-xs h-8" 
                                                          placeholder="e.g., 00:1B:44:11:3A:B7"
                                                          value={customUwaInputs.macAddress || ''}
                                                          onChange={(e) => {
                                                            setCustomUwaInputs({
                                                              ...customUwaInputs,
                                                              macAddress: e.target.value
                                                            });
                                                          }}
                                                        />
                                                      </div>
                                                      <div>
                                                        <label className="text-xs font-medium">Serial Number</label>
                                                        <Input 
                                                          className="mt-1 text-xs h-8" 
                                                          placeholder="e.g., SN-2024-001"
                                                          value={customUwaInputs.serialNumber || ''}
                                                          onChange={(e) => {
                                                            setCustomUwaInputs({
                                                              ...customUwaInputs,
                                                              serialNumber: e.target.value
                                                            });
                                                          }}
                                                        />
                                                      </div>
                                                      <div>
                                                        <label className="text-xs font-medium">Device Model</label>
                                                        <Input 
                                                          className="mt-1 text-xs h-8" 
                                                          placeholder="e.g., PowerEdge R740"
                                                          value={customUwaInputs.deviceModel || ''}
                                                          onChange={(e) => {
                                                            setCustomUwaInputs({
                                                              ...customUwaInputs,
                                                              deviceModel: e.target.value
                                                            });
                                                          }}
                                                        />
                                                      </div>
                                                    </div>
                                                    
                                                    <Button 
                                                      size="sm" 
                                                      className="mt-2 text-xs" 
                                                      variant="default"
                                                      onClick={() => {
                                                        // Generate Physical Device UWA
                                                        // Clean inputs of non-alphanumeric characters
                                                        const cleanImei = (customUwaInputs.imei || '').replace(/\D/g, '');
                                                        const cleanMac = (customUwaInputs.macAddress || '').replace(/\W/g, '');
                                                        const cleanSN = (customUwaInputs.serialNumber || '').replace(/[^a-zA-Z0-9-]/g, '');
                                                        const cleanModel = (customUwaInputs.deviceModel || '').replace(/[^a-zA-Z0-9]/g, '');
                                                        
                                                        // Combine all parts
                                                        const combinedString = `${cleanImei}${cleanMac}${cleanSN}${cleanModel}`;
                                                        
                                                        // Format with CLX prefix and 7-character chunks
                                                        const chunks = [];
                                                        chunks.push('CLX');
                                                        
                                                        // Break the combined string into chunks of 7 characters
                                                        for (let i = 0; i < combinedString.length; i += 7) {
                                                          chunks.push(combinedString.substring(i, i + 7));
                                                        }
                                                        
                                                        const formattedCustomUwa = chunks.join('-');
                                                        
                                                        // Set the generated UWA and show it
                                                        setGeneratedUwa(formattedCustomUwa);
                                                        setShowGeneratedUwa(true);
                                                        
                                                        // Try to copy to clipboard automatically
                                                        try {
                                                          navigator.clipboard.writeText(formattedCustomUwa);
                                                        } catch (err) {
                                                          console.error('Could not copy text: ', err);
                                                        }
                                                      }}
                                                    >
                                                      <Save className="h-3 w-3 mr-1" /> Generate Physical UWA
                                                    </Button>
                                                  </div>
                                                )}
                                                
                                                {showGeneratedUwa && (
                                                  <div className="mt-3 p-2 bg-green-50 rounded border border-green-200 text-xs">
                                                    <div className="flex items-center justify-between">
                                                      <p className="font-semibold text-green-700">Your Generated UWA:</p>
                                                      <Button 
                                                        size="sm" 
                                                        variant="ghost" 
                                                        className="h-6 w-6 p-0" 
                                                        onClick={() => setShowGeneratedUwa(false)}
                                                      >
                                                        <X className="h-3 w-3" />
                                                      </Button>
                                                    </div>
                                                    <p className="font-mono text-green-800 mt-1 break-all">{generatedUwa}</p>
                                                  </div>
                                                )}
                                              </div>
                                            </>
                                          );
                                        } else {
                                          // Physical Machine UWA Generation
                                          // Uses IMEI/MAC/SN - these rarely change (stable for 5+ years)
                                          
                                          // Sample data for demonstration
                                          const imei = "990000862471854";
                                          const macAddress = "00:1B:44:11:3A:B7";
                                          const serialNumber = "SN-2024-001";
                                          
                                          // Generate physical device UWA
                                          // Clean the input data
                                          const cleanMAC = macAddress.replace(/:/g, "");
                                          
                                          // Break into 7-character chunks for readability
                                          // Format: CLX-PH[IMEI chunks]-[MAC chunks]-[Serial chunks]
                                          const chunk1 = "PH" + imei.slice(0, 5); // Prefix + first 5 of IMEI
                                          const chunk2 = imei.slice(5, 12);      // Next 7 chars of IMEI
                                          const chunk3 = imei.slice(12);         // Remaining IMEI chars
                                          const chunk4 = cleanMAC.slice(0, 7);   // First 7 of MAC
                                          const chunk5 = cleanMAC.slice(7);      // Remaining MAC chars
                                          const chunk6 = serialNumber.replace(/-/g, ""); // Clean Serial Number
                                          
                                          const formattedUWA = `CLX-${chunk1}-${chunk2}-${chunk3}-${chunk4}-${chunk5}-${chunk6}`;
                                          
                                          return (
                                            <>
                                              <div className="flex items-center justify-between">
                                                <p className="text-xs font-medium">
                                                  Selected template: <span className="text-primary">Machine UWA (Physical Device)</span>
                                                </p>
                                              </div>
                                              <div className="mt-2 p-2 bg-muted rounded border text-xs font-mono">
                                                <p><span className="font-semibold">IMEI:</span> {imei}</p>
                                                <p><span className="font-semibold">MAC Address:</span> {macAddress}</p>
                                                <p><span className="font-semibold">Serial Number:</span> {serialNumber}</p>
                                              </div>
                                              <div className="mt-2 p-2 bg-green-50 rounded border border-green-200 text-xs">
                                                <p className="font-semibold text-green-700">Generated UWA:</p>
                                                <p className="font-mono text-green-800 mt-1 break-all">{formattedUWA}</p>
                                              </div>
                                              <div className="mt-2 text-xs text-muted-foreground">
                                                <p>Uses device identifiers that rarely change (5+ years stability)</p>
                                                <p>Formatted in 7-character chunks for readability</p>
                                              </div>
                                            </>
                                          );
                                        }
                                      } else if (identityType === 'Human') {
                                        // Human UWA template - sample implementation
                                        const driverId = "DL859405382";
                                        const biometricId = "FP8294-A12B";
                                        const employeeId = "EMP2024-503";
                                        const ssn = "123-45-6789";
                                        
                                        // Process into 7-character chunks for readability
                                        const chunk1 = "HU" + driverId.slice(2, 7); // Human prefix + 5 chars from driver ID
                                        const chunk2 = driverId.slice(7) + biometricId.slice(0, 4); // Remaining driver ID + start of biometric
                                        const chunk3 = biometricId.slice(4) + employeeId.slice(0, 2); // Rest of biometric + start of employee ID
                                        const chunk4 = employeeId.slice(2) + ssn.slice(0, 2); // Rest of employee ID + start of SSN
                                        const chunk5 = ssn.slice(2).replace(/-/g, ""); // Remaining SSN with hyphens removed
                                        
                                        const formattedUWA = `CLX-${chunk1}-${chunk2}-${chunk3}-${chunk4}-${chunk5}`;
                                        
                                        return (
                                          <>
                                            <div className="flex items-center justify-between">
                                              <p className="text-xs font-medium">
                                                Selected template: <span className="text-primary">Human UWA</span>
                                              </p>
                                            </div>
                                            <div className="mt-2 p-2 bg-muted rounded border text-xs font-mono">
                                              <p><span className="font-semibold">Driver's License:</span> {driverId}</p>
                                              <p><span className="font-semibold">Biometric ID:</span> {biometricId}</p>
                                              <p><span className="font-semibold">Employee ID:</span> {employeeId}</p>
                                              <p><span className="font-semibold">SSN:</span> {ssn}</p>
                                            </div>
                                            <div className="mt-2 p-2 bg-green-50 rounded border border-green-200 text-xs">
                                              <p className="font-semibold text-green-700">Generated UWA:</p>
                                              <p className="font-mono text-green-800 mt-1 break-all">{formattedUWA}</p>
                                            </div>
                                            <div className="mt-2 text-xs text-muted-foreground">
                                              <p>Combines government IDs, biometrics, and employee identifiers</p>
                                              <p>Formatted in 7-character chunks for readability</p>
                                            </div>
                                          </>
                                        );
                                      } else if (identityType === 'API') {
                                        // API UWA template - sample implementation
                                        const apiKey = "api_3a7b9c4d2e1f";
                                        const certId = "CERT-API-5832-XZ";
                                        const tokenHash = "jwt_token_hash_8a9d4f2";
                                        const serviceId = "SVC-452-AUTH-98";
                                        
                                        // Process into 7-character chunks for readability
                                        const chunk1 = "AP" + apiKey.slice(0, 5); // API prefix + first 5 of API key
                                        const chunk2 = apiKey.slice(5, 12);       // Next 7 chars of API key
                                        const chunk3 = apiKey.slice(12) + certId.slice(0, 4); // Rest of API key + start of cert
                                        const chunk4 = certId.slice(4, 11);       // Next 7 chars of cert ID
                                        const chunk5 = certId.slice(11) + tokenHash.slice(0, 3); // Rest of cert + start of token
                                        const chunk6 = tokenHash.slice(3, 10);    // Middle of token hash
                                        const chunk7 = tokenHash.slice(10) + serviceId.slice(0, 3); // Rest of token + start of service
                                        
                                        const formattedUWA = `CLX-${chunk1}-${chunk2}-${chunk3}-${chunk4}-${chunk5}-${chunk6}-${chunk7}`;
                                        
                                        return (
                                          <>
                                            <div className="flex items-center justify-between">
                                              <p className="text-xs font-medium">
                                                Selected template: <span className="text-primary">API UWA</span>
                                              </p>
                                            </div>
                                            <div className="mt-2 p-2 bg-muted rounded border text-xs font-mono">
                                              <p><span className="font-semibold">API Key:</span> {apiKey}</p>
                                              <p><span className="font-semibold">Certificate ID:</span> {certId}</p>
                                              <p><span className="font-semibold">Token Hash:</span> {tokenHash}</p>
                                              <p><span className="font-semibold">Service ID:</span> {serviceId}</p>
                                            </div>
                                            <div className="mt-2 p-2 bg-green-50 rounded border border-green-200 text-xs">
                                              <p className="font-semibold text-green-700">Generated UWA:</p>
                                              <p className="font-mono text-green-800 mt-1 break-all">{formattedUWA}</p>
                                            </div>
                                            <div className="mt-2 text-xs text-muted-foreground">
                                              <p>Uses API credentials, certificate IDs, and token hashes</p>
                                              <p>Formatted in 7-character chunks for readability</p>
                                            </div>
                                          </>
                                        );
                                      } else {
                                        // Third-Party UWA template - sample implementation
                                        const taxId = "81-3792415";
                                        const corpId = "DUNS-729548361";
                                        const partnerCode = "PART-XY-321";
                                        const vendorId = "VENDOR-87654";
                                        
                                        // Process into 7-character chunks for readability
                                        const chunk1 = "TP" + taxId.replace(/-/g, "").slice(0, 5); // TP prefix + first 5 of tax ID
                                        const chunk2 = corpId.replace(/-/g, "").slice(0, 7); // First 7 of corp ID (DUNS)
                                        const chunk3 = corpId.replace(/-/g, "").slice(7) + partnerCode.slice(0, 2); // Rest of corp ID + start of partner code
                                        const chunk4 = partnerCode.replace(/-/g, "").slice(2); // Rest of partner code
                                        const chunk5 = vendorId.replace(/-/g, ""); // Vendor ID
                                        
                                        const formattedUWA = `CLX-${chunk1}-${chunk2}-${chunk3}-${chunk4}-${chunk5}`;
                                        
                                        return (
                                          <>
                                            <div className="flex items-center justify-between">
                                              <p className="text-xs font-medium">
                                                Selected template: <span className="text-primary">Third-Party UWA</span>
                                              </p>
                                            </div>
                                            <div className="mt-2 p-2 bg-muted rounded border text-xs font-mono">
                                              <p><span className="font-semibold">Tax ID:</span> {taxId}</p>
                                              <p><span className="font-semibold">Corporate ID:</span> {corpId}</p>
                                              <p><span className="font-semibold">Partner Code:</span> {partnerCode}</p>
                                              <p><span className="font-semibold">Vendor ID:</span> {vendorId}</p>
                                            </div>
                                            <div className="mt-2 p-2 bg-green-50 rounded border border-green-200 text-xs">
                                              <p className="font-semibold text-green-700">Generated UWA:</p>
                                              <p className="font-mono text-green-800 mt-1 break-all">{formattedUWA}</p>
                                            </div>
                                            <div className="mt-2 text-xs text-muted-foreground">
                                              <p>Based on business credentials and vendor certifications</p>
                                              <p>Formatted in 7-character chunks for readability</p>
                                            </div>
                                          </>
                                        );
                                      }
                                    })()}
                                    
                                    <div className="flex items-center mt-3 justify-between">
                                      <div>
                                        <Button 
                                          variant="outline" 
                                          size="sm" 
                                          className="text-xs mr-2"
                                          onClick={() => {
                                            // Reset form values for UWA section
                                            setShowGeneratedUwa(false);
                                            setGeneratedUwa('');
                                            
                                            // Reset custom UWA inputs to defaults
                                            setCustomUwaInputs({
                                              instanceUUID: "1c-49ca-47ae-bebe-4087c52abbf4",
                                              environment: "PR",
                                              address: "2X57+XH+",
                                              osName: "centosl"
                                            });
                                          }}
                                        >
                                          <RefreshCw className="h-3 w-3 mr-1" /> Refresh
                                        </Button>
                                        <Button 
                                          variant="default" 
                                          size="sm" 
                                          className="text-xs"
                                          onClick={() => {
                                            const identityType = form.watch('identityBehaviorHygiene.selectedIdentityType') || 'Machine';
                                            const machineType = form.watch('identityBehaviorHygiene.machineType') || 'cloud';
                                            
                                            let generatedUwa = '';
                                            
                                            // Generate UWA based on identity type
                                            if (identityType === 'Machine') {
                                              if (machineType === 'cloud') {
                                                // Cloud server UWA generation
                                                generatedUwa = generateCloudUwa(
                                                  "1c-49ca-47ae-bebe-4087c52abbf4", // Instance UUID
                                                  "PR", // Production environment
                                                  "2X57+XH+", // Google open location
                                                  "centosl" // OS name
                                                );
                                              } else {
                                                // Physical device UWA generation
                                                const imei = "490154203237518";
                                                const macAddress = "00:1B:44:11:3A:B7";
                                                const serialNumber = "S/N-XG47-8102-HP";
                                                
                                                // Remove non-alphanumeric characters
                                                const cleanImei = imei.replace(/\D/g, '');
                                                const cleanMac = macAddress.replace(/\W/g, '');
                                                const cleanSerial = serialNumber.replace(/\W/g, '');
                                                
                                                // Combine first 7 of IMEI + first 7 of MAC + first 7 of Serial
                                                const combinedId = cleanImei.slice(0, 7) + 
                                                                  cleanMac.slice(0, 7) + 
                                                                  cleanSerial.slice(0, 7);
                                                
                                                // Format with CLX prefix and in 7-char chunks
                                                generatedUwa = 'CLX-' + combinedId.match(/.{1,7}/g)?.join('-');
                                              }
                                            } else if (identityType === 'Human') {
                                              // Human UWA generation
                                              const driverId = "DL859405382";
                                              const biometricId = "FP8294-A12B";
                                              const employeeId = "EMP2024-503";
                                              const ssn = "123-45-6789";
                                              
                                              // Clean up the IDs
                                              const cleanDriverId = driverId.replace(/\D/g, '').slice(-8);
                                              const cleanBiometric = biometricId.replace(/\W/g, '').slice(-6);
                                              const cleanEmployeeId = employeeId.replace(/\D/g, '').slice(-6);
                                              const cleanSSN = ssn.replace(/\D/g, '').slice(-4);
                                              
                                              // Combine into one string
                                              const combinedId = cleanDriverId + cleanBiometric + cleanEmployeeId + cleanSSN;
                                              
                                              // Format with CLX prefix and in 7-char chunks
                                              generatedUwa = 'CLX-' + combinedId.match(/.{1,7}/g)?.join('-');
                                            } else if (identityType === 'API') {
                                              // API UWA generation
                                              const apiKey = "api_3a7b9c4d2e1f";
                                              const certId = "CERT-API-5832-XZ";
                                              const tokenHash = "tk_7fb3e92a1c4d";
                                              const serviceId = "svc_8b72ec";
                                              
                                              // Clean and extract parts
                                              const cleanApiKey = apiKey.replace(/\W/g, '').slice(-8);
                                              const cleanCertId = certId.replace(/\W/g, '').slice(-8);
                                              const cleanToken = tokenHash.replace(/\W/g, '').slice(-8);
                                              const cleanServiceId = serviceId.replace(/\W/g, '').slice(-6);
                                              
                                              // Combine into one string
                                              const combinedId = cleanApiKey + cleanCertId + cleanToken + cleanServiceId;
                                              
                                              // Format with CLX prefix and in 7-char chunks
                                              generatedUwa = 'CLX-' + combinedId.match(/.{1,7}/g)?.join('-');
                                            } else if (identityType === 'Third-Party') {
                                              // Third-Party UWA generation
                                              const vendorId = "VEN-78291";
                                              const contractId = "CT-2025-8801";
                                              const securityClearance = "SC-L2-42";
                                              const businessId = "BIZ-88421";
                                              
                                              // Clean and extract parts
                                              const cleanVendorId = vendorId.replace(/\W/g, '').slice(-8);
                                              const cleanContractId = contractId.replace(/\W/g, '').slice(-8);
                                              const cleanSecurity = securityClearance.replace(/\W/g, '').slice(-6);
                                              const cleanBusinessId = businessId.replace(/\W/g, '').slice(-6);
                                              
                                              // Combine into one string
                                              const combinedId = cleanVendorId + cleanContractId + cleanSecurity + cleanBusinessId;
                                              
                                              // Format with CLX prefix and in 7-char chunks
                                              generatedUwa = 'CLX-' + combinedId.match(/.{1,7}/g)?.join('-');
                                            }
                                            
                                            // Set generated UWA and display it
                                            setGeneratedUwa(generatedUwa);
                                            setShowGeneratedUwa(true);
                                            
                                            // Save UWA record with component values
                                            saveUwaRecord(generatedUwa);
                                            
                                            // Try to copy to clipboard automatically
                                            try {
                                              navigator.clipboard.writeText(generatedUwa);
                                              toast({
                                                title: "UWA Generated",
                                                description: "UWA has been copied to clipboard and saved to records!",
                                                variant: "success",
                                              });
                                            } catch (err) {
                                              console.error('Could not copy text: ', err);
                                            }
                                          }}
                                        >
                                          <Save className="h-3 w-3 mr-1" /> Generate UWA
                                        </Button>
                                      </div>
                                      <p className="text-xs text-muted-foreground">Always starts with CLX</p>
                                    </div>
                                    
                                    {/* UWA Records Component Table - Right after UWA generation button */}
                                    <div className="mt-4 border rounded-md p-3">
                                      <h6 className="text-xs font-medium mb-2">UWA Records</h6>
                                      <p className="text-xs text-muted-foreground mb-2">
                                        This table shows all UWA records and the components used to create each UWA. 
                                        Highlighted fields with values were used to derive the UWA.
                                      </p>
                                      <div className="overflow-x-auto">
                                        <table className="min-w-full border-collapse text-xs">
                                          <thead className="bg-muted/30">
                                            <tr>
                                              <th className="py-1 px-2 text-left font-medium border">UWA</th>
                                              <th className="py-1 px-2 text-left font-medium border">Identity type</th>
                                              <th className="py-1 px-2 text-left font-medium border">Identification method</th>
                                              <th className="py-1 px-2 text-left font-medium border">ServerID</th>
                                              <th className="py-1 px-2 text-left font-medium border">UUID</th>
                                              <th className="py-1 px-2 text-left font-medium border">SN</th>
                                              <th className="py-1 px-2 text-left font-medium border">MAKE/MODEL</th>
                                              <th className="py-1 px-2 text-left font-medium border">OS</th>
                                              <th className="py-1 px-2 text-left font-medium border">Server/OWNER/COMPANY</th>
                                              <th className="py-1 px-2 text-left font-medium border">MAC</th>
                                              <th className="py-1 px-2 text-left font-medium border">UWA/N SHADOW</th>
                                              <th className="py-1 px-2 text-left font-medium border">ENVIRONMENT</th>
                                              <th className="py-1 px-2 text-left font-medium border">IP address</th>
                                              <th className="py-1 px-2 text-left font-medium border">EIN/BIZ #</th>
                                              <th className="py-1 px-2 text-left font-medium border">Business/Office/Home Address</th>
                                              <th className="py-1 px-2 text-left font-medium border">Actions</th>
                                            </tr>
                                          </thead>
                                          <tbody>
                                            {uwaRecords.length > 0 ? (
                                              uwaRecords.map((record, index) => (
                                                <tr key={index} className={index === uwaRecords.length - 1 ? "bg-green-50" : ""}>
                                                  {/* UWA Value - Read-only */}
                                                  <td className="py-1 px-2 border bg-amber-50 font-medium">
                                                    {record.uwaValue}
                                                  </td>
                                                  
                                                  {/* Identity Type */}
                                                  <td className={`py-1 px-2 border ${isUsedInUwa(record, 'identityType') ? 'bg-green-50 font-medium' : ''}`}>
                                                    {editingRecord === record.id && editingField === 'identityType' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'identityType', record.identityType || '')}
                                                      >
                                                        {isUsedInUwa(record, 'identityType') ? record.identityType : '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* Identification Method */}
                                                  <td className={`py-1 px-2 border ${isUsedInUwa(record, 'identificationMethod') ? 'bg-green-50 font-medium' : ''}`}>
                                                    {editingRecord === record.id && editingField === 'identificationMethod' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'identificationMethod', record.identificationMethod || '')}
                                                      >
                                                        {isUsedInUwa(record, 'identificationMethod') ? record.identificationMethod : '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* Server ID */}
                                                  <td className={`py-1 px-2 border ${isUsedInUwa(record, 'serverId') ? 'bg-green-50 font-medium' : ''}`}>
                                                    {editingRecord === record.id && editingField === 'serverId' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'serverId', record.serverId || '')}
                                                      >
                                                        {isUsedInUwa(record, 'serverId') ? record.serverId : '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* UUID */}
                                                  <td className={`py-1 px-2 border ${isUsedInUwa(record, 'instanceUUID') ? 'bg-green-50 font-medium' : ''}`}>
                                                    {editingRecord === record.id && editingField === 'instanceUUID' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'instanceUUID', record.instanceUUID || '')}
                                                      >
                                                        {isUsedInUwa(record, 'instanceUUID') ? record.instanceUUID : '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* Serial Number */}
                                                  <td className="py-1 px-2 border">
                                                    {editingRecord === record.id && editingField === 'serialNumber' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'serialNumber', record.serialNumber || '')}
                                                      >
                                                        {record.serialNumber || '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* Make/Model */}
                                                  <td className="py-1 px-2 border">
                                                    {editingRecord === record.id && editingField === 'makeModel' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'makeModel', record.makeModel || '')}
                                                      >
                                                        {record.makeModel || '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* OS */}
                                                  <td className={`py-1 px-2 border ${isUsedInUwa(record, 'osName') ? 'bg-green-50 font-medium' : ''}`}>
                                                    {editingRecord === record.id && editingField === 'osName' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'osName', record.osName || '')}
                                                      >
                                                        {isUsedInUwa(record, 'osName') ? record.osName : '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* Company Name */}
                                                  <td className="py-1 px-2 border">
                                                    {editingRecord === record.id && editingField === 'companyName' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'companyName', record.companyName || '')}
                                                      >
                                                        {record.companyName || '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* MAC Address */}
                                                  <td className="py-1 px-2 border">
                                                    {editingRecord === record.id && editingField === 'macAddress' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'macAddress', record.macAddress || '')}
                                                      >
                                                        {record.macAddress || '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* UWA Shadow */}
                                                  <td className="py-1 px-2 border">
                                                    {editingRecord === record.id && editingField === 'uwaShadow' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'uwaShadow', record.uwaShadow || '')}
                                                      >
                                                        {record.uwaShadow || '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* Environment */}
                                                  <td className={`py-1 px-2 border ${isUsedInUwa(record, 'environment') ? 'bg-green-50 font-medium' : ''}`}>
                                                    {editingRecord === record.id && editingField === 'environment' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'environment', record.environment || '')}
                                                      >
                                                        {isUsedInUwa(record, 'environment') ? record.environment : '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* IP Address */}
                                                  <td className="py-1 px-2 border">
                                                    {editingRecord === record.id && editingField === 'ipAddress' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'ipAddress', record.ipAddress || '')}
                                                      >
                                                        {record.ipAddress || '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* EIN/Business Number */}
                                                  <td className="py-1 px-2 border">
                                                    {editingRecord === record.id && editingField === 'einBusinessNumber' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'einBusinessNumber', record.einBusinessNumber || '')}
                                                      >
                                                        {record.einBusinessNumber || '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* Address */}
                                                  <td className={`py-1 px-2 border ${isUsedInUwa(record, 'address') ? 'bg-green-50 font-medium' : ''}`}>
                                                    {editingRecord === record.id && editingField === 'address' ? (
                                                      <input 
                                                        type="text" 
                                                        className="w-full p-0.5 text-xs border border-green-300 focus:outline-none focus:ring-1 focus:ring-green-500"
                                                        value={editValue}
                                                        onChange={handleEditChange}
                                                        onBlur={handleEditBlur}
                                                        autoFocus
                                                      />
                                                    ) : (
                                                      <div 
                                                        className="cursor-text"
                                                        onClick={() => handleEditStart(record.id, 'address', record.address || '')}
                                                      >
                                                        {isUsedInUwa(record, 'address') ? record.address : '-'}
                                                      </div>
                                                    )}
                                                  </td>
                                                  
                                                  {/* Actions */}
                                                  <td className="py-1 px-2 border">
                                                    <div className="flex space-x-1">
                                                      <Button
                                                        size="sm"
                                                        variant="ghost"
                                                        className="h-6 w-6 p-0"
                                                        onClick={() => {
                                                          if (window.confirm('Are you sure you want to delete this UWA record?')) {
                                                            // Delete UWA record from database
                                                            if (typeof record.id === 'number') {
                                                              fetch(`/api/uwas/${record.id}`, {
                                                                method: 'DELETE'
                                                              }).then(response => {
                                                                if (response.ok) {
                                                                  // Remove from local state
                                                                  setUwaRecords(uwaRecords.filter(r => r.id !== record.id));
                                                                  toast({
                                                                    title: "Record Deleted",
                                                                    description: "UWA record has been permanently removed.",
                                                                    variant: "default",
                                                                  });
                                                                } else {
                                                                  toast({
                                                                    title: "Delete Failed",
                                                                    description: "Could not delete record from database.",
                                                                    variant: "destructive",
                                                                  });
                                                                }
                                                              });
                                                            }
                                                          }
                                                        }}
                                                      >
                                                        <Trash2 className="h-3 w-3 text-red-500" />
                                                      </Button>
                                                    </div>
                                                  </td>
                                                </tr>
                                              ))
                                            ) : (
                                              <tr>
                                                <td colSpan={16} className="py-3 px-2 text-center text-muted-foreground">
                                                  No UWA records found. Generate a UWA to create a record.
                                                </td>
                                              </tr>
                                            )}
                                          </tbody>
                                        </table>
                                      </div>
                                      
                                      <div className="mt-2 flex justify-end">
                                        <Button 
                                          size="sm" 
                                          variant="outline"
                                          onClick={() => {
                                            // Export UWA records to CSV
                                            exportUwaRecordsToCsv();
                                          }}
                                        >
                                          <Download className="h-3 w-3 mr-1" /> Export Records
                                        </Button>
                                      </div>
                                    </div>
                                    
                                    {/* Display area for generated UWA from the main Generate UWA button */}
                                    {showGeneratedUwa && (
                                      <div className="mt-4 p-3 bg-green-50 rounded border border-green-200 text-xs">
                                        <div className="flex items-center justify-between">
                                          <p className="font-semibold text-green-700">Generated UWA:</p>
                                          <Button 
                                            size="sm" 
                                            variant="ghost" 
                                            className="h-6 w-6 p-0" 
                                            onClick={() => setShowGeneratedUwa(false)}
                                          >
                                            <X className="h-3 w-3" />
                                          </Button>
                                        </div>
                                        <p className="font-mono text-green-800 mt-1 break-all">{generatedUwa}</p>
                                        
                                        <div className="mt-2 flex items-center">
                                          <Button 
                                            size="sm" 
                                            variant="outline" 
                                            className="h-6 py-0 px-2 text-xs"
                                            onClick={() => {
                                              navigator.clipboard.writeText(generatedUwa).then(() => {
                                                toast({
                                                  title: "Copied!",
                                                  description: "UWA has been copied to clipboard",
                                                  variant: "success",
                                                });
                                              }).catch(err => {
                                                console.error('Could not copy text: ', err);
                                              });
                                            }}
                                          >
                                            <Copy className="h-3 w-3 mr-1" /> Copy Again
                                          </Button>
                                          <p className="ml-2 text-xs text-muted-foreground">
                                            Your UWA has been automatically copied to clipboard
                                          </p>
                                        </div>
                                        
                                        {/* UWA Records Table */}
                                        {uwaRecords.length > 0 && (
                                          <div className="mt-4 border rounded-md p-3">
                                            <h6 className="text-xs font-medium mb-2 flex items-center justify-between">
                                              <div className="flex items-center gap-2">
                                                <span>UWA Records ({uwaRecords.length})</span>
                                                {/* Database connection status */}
                                                <Button 
                                                  variant="outline" 
                                                  size="icon" 
                                                  onClick={async () => {
                                                    try {
                                                      const response = await fetch('/api/uwas');
                                                      if (response.ok) {
                                                        const data = await response.json();
                                                        const convertedRecords = data.map((dbUwa: any) => convertDbUwaToLocalFormat(dbUwa)).filter(Boolean);
                                                        setUwaRecords(convertedRecords);
                                                        toast({
                                                          title: "Records Refreshed",
                                                          description: `Loaded ${convertedRecords.length} UWA records from database.`,
                                                          variant: "default",
                                                        });
                                                      } else {
                                                        toast({
                                                          title: "Refresh Failed",
                                                          description: "Could not load records from database.",
                                                          variant: "destructive",
                                                        });
                                                      }
                                                    } catch (error) {
                                                      console.error('Error refreshing UWA records:', error);
                                                      toast({
                                                        title: "Connection Error",
                                                        description: "Could not connect to database.",
                                                        variant: "destructive",
                                                      });
                                                    }
                                                  }}
                                                  title="Refresh UWA records from database"
                                                >
                                                  <RefreshCw className="h-4 w-4" />
                                                </Button>
                                              </div>
                                              <div className="flex space-x-1">
                                                <Button 
                                                  variant="ghost" 
                                                  size="xs" 
                                                  className="h-6 px-2 text-xs"
                                                  onClick={exportUwaRecords}
                                                >
                                                  <FileText className="h-3 w-3 mr-1" /> Export CSV
                                                </Button>
                                              </div>
                                            </h6>
                                            
                                            <div className="overflow-x-auto">
                                              <table className="min-w-full border-collapse text-xs">
                                                <thead className="bg-muted/30">
                                                  <tr>
                                                    <th className="py-1 px-2 text-left font-medium border">UWA</th>
                                                    <th className="py-1 px-2 text-left font-medium border">Identity type</th>
                                                    <th className="py-1 px-2 text-left font-medium border">Identification method</th>
                                                    <th className="py-1 px-2 text-left font-medium border">ServerID</th>
                                                    <th className="py-1 px-2 text-left font-medium border">UUID</th>
                                                    <th className="py-1 px-2 text-left font-medium border">SN</th>
                                                    <th className="py-1 px-2 text-left font-medium border">MAKE/MODEL</th>
                                                    <th className="py-1 px-2 text-left font-medium border">OS</th>
                                                    <th className="py-1 px-2 text-left font-medium border">Server/OWNER/COMPANY</th>
                                                    <th className="py-1 px-2 text-left font-medium border">MAC</th>
                                                    <th className="py-1 px-2 text-left font-medium border">UWA/N SHADOW</th>
                                                    <th className="py-1 px-2 text-left font-medium border">ENVIRONMENT</th>
                                                    <th className="py-1 px-2 text-left font-medium border">IP address</th>
                                                    <th className="py-1 px-2 text-left font-medium border">EIN/BIZ #</th>
                                                    <th className="py-1 px-2 text-left font-medium border">ADDRESS</th>
                                                    <th className="py-1 px-2 text-left font-medium border">Actions</th>
                                                  </tr>
                                                </thead>
                                                <tbody>
                                                  {uwaRecords.map((record, index) => (
                                                    <tr key={index} className={index === uwaRecords.length - 1 ? "bg-green-50" : ""}>
                                                      {/* UWA Value - Read-only */}
                                                      <td className="py-1 px-2 border bg-amber-50 font-medium">
                                                        {record.uwaValue}
                                                      </td>
                                                      
                                                      {/* Identity Type */}
                                                      <td className={`py-1 px-2 border ${isUsedInUwa(record, 'identityType') ? 'bg-blue-50 font-medium' : ''}`}>
                                                        {editingRecord === record.id && editingField === 'identityType' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'identityType', record.identityType || '')}
                                                          >
                                                            {record.identityType || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* Identification Method */}
                                                      <td className={`py-1 px-2 border ${isUsedInUwa(record, 'identificationMethod') ? 'bg-blue-50 font-medium' : ''}`}>
                                                        {editingRecord === record.id && editingField === 'identificationMethod' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'identificationMethod', record.identificationMethod || '')}
                                                          >
                                                            {record.identificationMethod || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* Server ID */}
                                                      <td className={`py-1 px-2 border ${isUsedInUwa(record, 'serverId') ? 'bg-blue-50 font-medium' : ''}`}>
                                                        {editingRecord === record.id && editingField === 'serverId' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'serverId', record.serverId || '')}
                                                          >
                                                            {record.serverId || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* Instance UUID */}
                                                      <td className={`py-1 px-2 border ${isUsedInUwa(record, 'instanceUUID') ? 'bg-blue-50 font-medium' : ''}`}>
                                                        {editingRecord === record.id && editingField === 'instanceUUID' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'instanceUUID', record.instanceUUID || '')}
                                                          >
                                                            {record.instanceUUID || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* Serial Number */}
                                                      <td className={`py-1 px-2 border ${isUsedInUwa(record, 'serialNumber') ? 'bg-blue-50 font-medium' : ''}`}>
                                                        {editingRecord === record.id && editingField === 'serialNumber' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'serialNumber', record.serialNumber || '')}
                                                          >
                                                            {record.serialNumber || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* Make/Model */}
                                                      <td className={`py-1 px-2 border ${isUsedInUwa(record, 'makeModel') ? 'bg-blue-50 font-medium' : ''}`}>
                                                        {editingRecord === record.id && editingField === 'makeModel' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'makeModel', record.makeModel || '')}
                                                          >
                                                            {record.makeModel || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* OS Name */}
                                                      <td className={`py-1 px-2 border ${isUsedInUwa(record, 'osName') ? 'bg-blue-50 font-medium' : ''}`}>
                                                        {editingRecord === record.id && editingField === 'osName' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'osName', record.osName || '')}
                                                          >
                                                            {record.osName || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* Company Name */}
                                                      <td className="py-1 px-2 border">
                                                        {editingRecord === record.id && editingField === 'companyName' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'companyName', record.companyName || '')}
                                                          >
                                                            {record.companyName || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* MAC Address */}
                                                      <td className={`py-1 px-2 border ${isUsedInUwa(record, 'macAddress') ? 'bg-blue-50 font-medium' : ''}`}>
                                                        {editingRecord === record.id && editingField === 'macAddress' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'macAddress', record.macAddress || '')}
                                                          >
                                                            {record.macAddress || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* UWA Shadow */}
                                                      <td className="py-1 px-2 border">
                                                        {record.uwaShadow || '-'}
                                                      </td>
                                                      
                                                      {/* Environment */}
                                                      <td className={`py-1 px-2 border ${isUsedInUwa(record, 'environment') ? 'bg-blue-50 font-medium' : ''}`}>
                                                        {editingRecord === record.id && editingField === 'environment' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'environment', record.environment || '')}
                                                          >
                                                            {record.environment || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* IP Address */}
                                                      <td className="py-1 px-2 border">
                                                        {editingRecord === record.id && editingField === 'ipAddress' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'ipAddress', record.ipAddress || '')}
                                                          >
                                                            {record.ipAddress || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* EIN/Business Number */}
                                                      <td className="py-1 px-2 border">
                                                        {editingRecord === record.id && editingField === 'einBusinessNumber' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'einBusinessNumber', record.einBusinessNumber || '')}
                                                          >
                                                            {record.einBusinessNumber || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* Address */}
                                                      <td className={`py-1 px-2 border ${isUsedInUwa(record, 'address') ? 'bg-blue-50 font-medium' : ''}`}>
                                                        {editingRecord === record.id && editingField === 'address' ? (
                                                          <input 
                                                            type="text" 
                                                            className="w-full p-0.5 text-xs border border-blue-300 focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                            value={editValue}
                                                            onChange={handleEditChange}
                                                            onBlur={handleEditBlur}
                                                            autoFocus
                                                          />
                                                        ) : (
                                                          <div 
                                                            className="cursor-text"
                                                            onClick={() => handleEditStart(record.id, 'address', record.address || '')}
                                                          >
                                                            {record.address || '-'}
                                                          </div>
                                                        )}
                                                      </td>
                                                      
                                                      {/* Actions */}
                                                      <td className="py-1 px-2 border">
                                                        <div className="flex space-x-1">
                                                          <Button 
                                                            variant="ghost" 
                                                            size="sm" 
                                                            className="h-5 w-5 p-0"
                                                            onClick={() => handleDeleteRecord(record.id)}
                                                          >
                                                            <Trash2 className="h-3 w-3" />
                                                          </Button>
                                                        </div>
                                                      </td>
                                                    </tr>
                                                  ))}
                                                </tbody>
                                              </table>
                                            </div>
                                            
                                            <div className="mt-2 text-xs text-muted-foreground">
                                              <p>Record #{uwaRecords.length} • Created {new Date().toLocaleString()}</p>
                                            </div>
                                          </div>
                                        )}
                                      </div>
                                    )}
                                    
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        {/* Components table removed as requested */}
                      </div>
                    </div>
                  </div>
                  
                  {/* 1. Identification Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">1. Identification</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.userId"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>User ID</FormLabel>
                            <FormDescription>Employee ID, service account name</FormDescription>
                            <FormControl>
                              <Input placeholder="Enter user ID" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.fullNameRole"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Full Name / Role</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter full name and role" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.contactInfo"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Contact Info</FormLabel>
                            <FormDescription>Email, phone for emergency access</FormDescription>
                            <FormControl>
                              <Input placeholder="Enter contact information" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.identityType"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Identity Type</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select identity type" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="employee">Employee</SelectItem>
                                <SelectItem value="contractor">Contractor</SelectItem>
                                <SelectItem value="vendor">Vendor</SelectItem>
                                <SelectItem value="service-account">Service Account</SelectItem>
                                <SelectItem value="system-account">System Account</SelectItem>
                                <SelectItem value="other">Other</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.identificationMethod"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Identification Method</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select identification method" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectGroup>
                                  <SelectLabel>Standard Authentication</SelectLabel>
                                  <SelectItem value="username-password">Username/Password</SelectItem>
                                  <SelectItem value="employee-id">Employee ID</SelectItem>
                                  <SelectItem value="certificate">Certificate</SelectItem>
                                  <SelectItem value="smart-card">Smart Card</SelectItem>
                                  <SelectItem value="sso">Single Sign-On</SelectItem>
                                  <SelectItem value="token">Token-based</SelectItem>
                                </SelectGroup>
                                
                                <SelectGroup>
                                  <SelectLabel>Advanced Authentication</SelectLabel>
                                  <SelectItem value="mfa">MFA (Multi-Factor Authentication)</SelectItem>
                                  <SelectItem value="uwa">UWA (Universal Wallet Address)</SelectItem>
                                </SelectGroup>
                                
                                <SelectGroup>
                                  <SelectLabel>Biometric</SelectLabel>
                                  <SelectItem value="biometric-fingerprint">Biometric - Fingerprint</SelectItem>
                                  <SelectItem value="biometric-voice">Biometric - Voice</SelectItem>
                                  <SelectItem value="biometric-facial">Biometric - Facial</SelectItem>
                                  <SelectItem value="biometric-iris">Biometric - Iris</SelectItem>
                                </SelectGroup>
                                
                                <SelectGroup>
                                  <SelectLabel>Government IDs</SelectLabel>
                                  <SelectItem value="drivers-license">Driver's License</SelectItem>
                                  <SelectItem value="passport">Passport</SelectItem>
                                  <SelectItem value="national-id">National ID</SelectItem>
                                  <SelectItem value="military-id">Military ID</SelectItem>
                                  <SelectItem value="state-id">State ID</SelectItem>
                                  <SelectItem value="birth-certificate">Birth Certificate</SelectItem>
                                  <SelectItem value="social-security">Social Security Card</SelectItem>
                                  <SelectItem value="citizenship-certificate">Certificate of Citizenship</SelectItem>
                                </SelectGroup>
                                
                                <SelectItem value="other">Other</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  {/* 2. Authentication Practices Section */}
                  
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">2. Authentication Practices</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.mfaTypes"
                        render={() => (
                          <FormItem>
                            <div className="mb-4">
                              <FormLabel>MFA Types</FormLabel>
                              <FormDescription>
                                Select all MFA types that are implemented
                              </FormDescription>
                            </div>
                            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                              {[
                                "Mobile App Authenticator",
                                "Hardware Tokens/Keys",
                                "Biometrics",
                                "Push Notifications",
                                "Phone Calls"
                              ].map((type) => (
                                <FormField
                                  key={type}
                                  control={form.control}
                                  name="identityBehaviorHygiene.mfaTypes"
                                  render={({ field }) => {
                                    return (
                                      <FormItem
                                        key={type}
                                        className="flex flex-row items-start space-x-3 space-y-0"
                                      >
                                        <FormControl>
                                          <Checkbox
                                            checked={field.value?.includes(type)}
                                            onCheckedChange={(checked) => {
                                              const updatedValue = checked
                                                ? [...(field.value || []), type]
                                                : field.value?.filter(
                                                    (value) => value !== type
                                                  ) || [];
                                              field.onChange(updatedValue);
                                            }}
                                          />
                                        </FormControl>
                                        <FormLabel className="font-normal cursor-pointer">
                                          {type}
                                        </FormLabel>
                                      </FormItem>
                                    );
                                  }}
                                />
                              ))}
                            </div>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.biometricAuthentication"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel>Biometric Authentication</FormLabel>
                              <FormDescription>
                                Do you use biometric authentication?
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.biometricTypes"
                        render={() => (
                          <FormItem>
                            <div className="mb-4">
                              <FormLabel>Biometric Types</FormLabel>
                              <FormDescription>
                                Select all biometric types that are used
                              </FormDescription>
                            </div>
                            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                              {[
                                "Fingerprint", 
                                "Facial Recognition",
                                "Voice Recognition",
                                "Iris Scanning",
                                "Palm Vein/Hand Geometry",
                                "Behavioral Biometrics"
                              ].map((type) => (
                                <FormField
                                  key={type}
                                  control={form.control}
                                  name="identityBehaviorHygiene.biometricTypes"
                                  render={({ field }) => {
                                    return (
                                      <FormItem
                                        key={type}
                                        className="flex flex-row items-start space-x-3 space-y-0"
                                      >
                                        <FormControl>
                                          <Checkbox
                                            checked={field.value?.includes(type)}
                                            onCheckedChange={(checked) => {
                                              const updatedValue = checked
                                                ? [...(field.value || []), type]
                                                : field.value?.filter(
                                                    (value) => value !== type
                                                  ) || [];
                                              field.onChange(updatedValue);
                                            }}
                                          />
                                        </FormControl>
                                        <FormLabel className="font-normal cursor-pointer">
                                          {type}
                                        </FormLabel>
                                      </FormItem>
                                    );
                                  }}
                                />
                              ))}
                            </div>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* Access Behavior Section - REMOVED DUPLICATE NUMBER */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">Access Behavior</h4>
                    <div className="space-y-6">
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.loginPatterns"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Login Patterns</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select typical login patterns" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="regular-business-hours">Regular Business Hours Only</SelectItem>
                                <SelectItem value="extended-hours">Extended Hours (Early/Late)</SelectItem>
                                <SelectItem value="24-7-operations">24/7 Operations</SelectItem>
                                <SelectItem value="mostly-remote">Primarily Remote Access</SelectItem>
                                <SelectItem value="irregular-varied">Irregular/Varied Patterns</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.remoteAccessFrequency"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Remote Access Frequency</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select remote access frequency" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="rare">Rare (Almost Never)</SelectItem>
                                <SelectItem value="occasional">Occasional (Monthly)</SelectItem>
                                <SelectItem value="regular">Regular (Weekly)</SelectItem>
                                <SelectItem value="frequent">Frequent (Daily)</SelectItem>
                                <SelectItem value="primary-access">Primary Access Method</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.sessionDuration"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Typical Session Duration</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select typical session duration" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="short">Short (&lt;1 hour)</SelectItem>
                                <SelectItem value="medium">Medium (1-4 hours)</SelectItem>
                                <SelectItem value="long">Long (4-8 hours)</SelectItem>
                                <SelectItem value="extended">Extended (&gt;8 hours)</SelectItem>
                                <SelectItem value="all-day">All Day Sessions</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <FormField
                          control={form.control}
                          name="identityBehaviorHygiene.abnormalAccessDetection"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Abnormal Access Detection</FormLabel>
                                <FormDescription>
                                  Do you have systems to detect abnormal access patterns?
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="identityBehaviorHygiene.locationBasedAccess"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Location-Based Access Controls</FormLabel>
                                <FormDescription>
                                  Do you restrict access based on geographic location?
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                      </div>
                    </div>
                  </div>
                  
                  {/* 4. Identity Protection Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">4. Identity Protection</h4>
                    <div className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <FormField
                          control={form.control}
                          name="identityBehaviorHygiene.identityProtectionTraining"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Identity Protection Training</FormLabel>
                                <FormDescription>
                                  Do you provide identity protection training to users?
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="identityBehaviorHygiene.trainingCompletionDate"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Last Training Completion Date</FormLabel>
                              <FormControl>
                                <Input type="date" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.phishingAwarenessLevel"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Phishing Awareness Level</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select phishing awareness level" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="basic">Basic Awareness</SelectItem>
                                <SelectItem value="intermediate">Intermediate Understanding</SelectItem>
                                <SelectItem value="advanced">Advanced Knowledge</SelectItem>
                                <SelectItem value="expert">Expert Level</SelectItem>
                                <SelectItem value="unknown">Unknown/Not Measured</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.securityIncidentHistory"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel>Security Incident History</FormLabel>
                              <FormDescription>
                                Have you experienced identity-related security incidents in the past 12 months?
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.incidentDetails"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Incident Details</FormLabel>
                            <FormControl>
                              <Textarea 
                                placeholder="If you had incidents, please provide brief details about the nature and impact" 
                                className="h-24"
                                {...field} 
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* 5. Privileged Access Management Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">5. Privileged Access Management</h4>
                    <div className="space-y-6">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <FormField
                          control={form.control}
                          name="identityBehaviorHygiene.privilegedAccountInventory"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Privileged Account Inventory</FormLabel>
                                <FormDescription>
                                  Do you maintain an inventory of privileged accounts?
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="identityBehaviorHygiene.justInTimeAccess"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Just-In-Time Access</FormLabel>
                                <FormDescription>
                                  Do you implement just-in-time access for privileged accounts?
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="identityBehaviorHygiene.privilegeEscalationControls"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Privilege Escalation Controls</FormLabel>
                                <FormDescription>
                                  Do you have controls to prevent unauthorized privilege escalation?
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.adminAccountReview"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Admin Account Review Frequency</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select review frequency" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="weekly">Weekly</SelectItem>
                                <SelectItem value="monthly">Monthly</SelectItem>
                                <SelectItem value="quarterly">Quarterly</SelectItem>
                                <SelectItem value="semi-annually">Semi-Annually</SelectItem>
                                <SelectItem value="annually">Annually</SelectItem>
                                <SelectItem value="never">Never/Ad-hoc</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.separationOfDuties"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel>Separation of Duties</FormLabel>
                              <FormDescription>
                                Do you implement separation of duties for privileged operations?
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* 6. Lifecycle & Governance Section - MERGED */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">6. Lifecycle & Governance</h4>
                    <div className="space-y-6">
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.onboardingStatus"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Onboarding Process Status</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select onboarding process status" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="manual">Manual Process</SelectItem>
                                <SelectItem value="partially-automated">Partially Automated</SelectItem>
                                <SelectItem value="fully-automated">Fully Automated</SelectItem>
                                <SelectItem value="identity-governance">Identity Governance Solution</SelectItem>
                                <SelectItem value="no-process">No Formal Process</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.onboardingOffboardingDate"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Onboarding/Offboarding Date</FormLabel>
                            <FormControl>
                              <Input 
                                type="date" 
                                placeholder="mm/dd/yyyy" 
                                {...field} 
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <FormField
                          control={form.control}
                          name="identityBehaviorHygiene.offboardingProcess"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Formal Offboarding Process</FormLabel>
                                <FormDescription>
                                  Do you have a formal offboarding process to revoke access?
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="identityBehaviorHygiene.accountDormancyMonitoring"
                          render={({ field }) => (
                            <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Account Dormancy Monitoring</FormLabel>
                                <FormDescription>
                                  Do you monitor and manage dormant/inactive accounts?
                                </FormDescription>
                              </div>
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.accessReviewFrequency"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Access Review Frequency</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select access review frequency" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="monthly">Monthly</SelectItem>
                                <SelectItem value="quarterly">Quarterly</SelectItem>
                                <SelectItem value="semi-annually">Semi-Annually</SelectItem>
                                <SelectItem value="annually">Annually</SelectItem>
                                <SelectItem value="ad-hoc">Ad-hoc/No Regular Schedule</SelectItem>
                                <SelectItem value="never">Never Performed</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.roleChanges"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel>Role Change Management Process</FormLabel>
                              <FormDescription>
                                Do you have a process to manage access rights when users change roles?
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.accessReviewSchedule"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Access Review Schedule</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select review schedule" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="monthly">Monthly</SelectItem>
                                <SelectItem value="quarterly">Quarterly</SelectItem>
                                <SelectItem value="semi-annual">Semi-Annually</SelectItem>
                                <SelectItem value="annual">Annually</SelectItem>
                                <SelectItem value="biennial">Every 2 Years</SelectItem>
                                <SelectItem value="none">No Regular Review</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.certificationStatus"
                        render={({ field }) => (
                          <FormItem className="border p-4 rounded-md h-full flex flex-col justify-center">
                            <div className="flex flex-row items-start space-x-3">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Certification Status</FormLabel>
                                <FormDescription>
                                  Is this identity compliant with NIST/ISO audits?
                                </FormDescription>
                              </div>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.incidentHistory"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Incident History</FormLabel>
                            <FormDescription>Past violations, e.g., policy breaches</FormDescription>
                            <FormControl>
                              <Textarea 
                                placeholder="Describe any past security incidents" 
                                className="min-h-[80px]"
                                {...field} 
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* Authentication Practices Section - REMOVED DUPLICATE NUMBER */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">Authentication Practices</h4>
                    <div className="space-y-6">
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.passwordPolicyCompliance"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel>Password Policy Compliance</FormLabel>
                              <FormDescription>
                                Do you have a formal password policy that meets industry standards?
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.passwordPolicyDetails"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Password Policy Details</FormLabel>
                            <FormControl>
                              <Textarea 
                                placeholder="Describe your password policy requirements (length, complexity, rotation, etc.)" 
                                className="h-24"
                                {...field} 
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.mfaStatus"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel>Multi-Factor Authentication (MFA)</FormLabel>
                              <FormDescription>
                                Do you implement multi-factor authentication?
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.mfaTypes"
                        render={() => (
                          <FormItem>
                            <div className="mb-4">
                              <FormLabel>MFA Types</FormLabel>
                              <FormDescription>
                                Select all MFA types that are implemented
                              </FormDescription>
                            </div>
                            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                              {[
                                "SMS/Text Messages", 
                                "Email Codes"
                              ].map((type) => (
                                <FormField
                                  key={type}
                                  control={form.control}
                                  name="identityBehaviorHygiene.mfaTypes"
                                  render={({ field }) => {
                                    return (
                                      <FormItem
                                        key={type}
                                        className="flex flex-row items-start space-x-3 space-y-0"
                                      >
                                        <FormControl>
                                          <Checkbox
                                            checked={field.value?.includes(type)}
                                            onCheckedChange={(checked) => {
                                              const updatedValue = checked
                                                ? [...(field.value || []), type]
                                                : field.value?.filter(
                                                    (value) => value !== type
                                                  ) || [];
                                              field.onChange(updatedValue);
                                            }}
                                          />
                                        </FormControl>
                                        <FormLabel className="font-normal cursor-pointer">
                                          {type}
                                        </FormLabel>
                                      </FormItem>
                                    );
                                  }}
                                />
                              ))}
                            </div>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* Classification - REMOVED DUPLICATE NUMBER Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">Classification</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.accessTier"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Access Tier</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select access tier" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="tier1">Tier 1 (Basic)</SelectItem>
                                <SelectItem value="tier2">Tier 2 (Standard)</SelectItem>
                                <SelectItem value="tier3">Tier 3 (Elevated)</SelectItem>
                                <SelectItem value="tier4">Tier 4 (Administrative)</SelectItem>
                                <SelectItem value="tier5">Tier 5 (Executive)</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.departmentTeam"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Department / Team</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter department or team" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.assignedRiskLevel"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Assigned Risk Level</FormLabel>
                            <FormDescription>E.g., "High" for finance admins</FormDescription>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select risk level" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="low">Low</SelectItem>
                                <SelectItem value="medium">Medium</SelectItem>
                                <SelectItem value="high">High</SelectItem>
                                <SelectItem value="critical">Critical</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.federatedIdentitySource2"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Federated Identity Source</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select identity source" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="azure-ad">Azure AD / Entra ID</SelectItem>
                                <SelectItem value="okta">Okta</SelectItem>
                                <SelectItem value="ping">PingIdentity</SelectItem>
                                <SelectItem value="aws">AWS IAM</SelectItem>
                                <SelectItem value="google">Google Workspace</SelectItem>
                                <SelectItem value="on-prem-ad">On-Prem Active Directory</SelectItem>
                                <SelectItem value="none">None - Local Accounts Only</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* 7. Access 3. Access & Permissions Permissions Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">7. Access 3. Access & Permissions Permissions</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.assignedRoles"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Assigned Roles</FormLabel>
                            <FormDescription>RBAC groups, e.g., "Finance-ReadOnly"</FormDescription>
                            <FormControl>
                              <Input placeholder="Enter assigned roles" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.entitlements"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Entitlements</FormLabel>
                            <FormDescription>Specific permissions like "SQL DB Admin"</FormDescription>
                            <FormControl>
                              <Input placeholder="Enter specific permissions" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.accessDuration2"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Access Duration</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select access duration" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="temp-1day">Temporary (1 day)</SelectItem>
                                <SelectItem value="temp-1week">Temporary (1 week)</SelectItem>
                                <SelectItem value="temp-1month">Temporary (1 month)</SelectItem>
                                <SelectItem value="temp-3months">Temporary (3 months)</SelectItem>
                                <SelectItem value="temp-6months">Temporary (6 months)</SelectItem>
                                <SelectItem value="permanent">Permanent</SelectItem>
                                <SelectItem value="jit">Just-in-time (as needed)</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <div className="flex flex-col gap-4">
                        <FormField
                          control={form.control}
                          name="identityBehaviorHygiene.mfaStatus2"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>MFA Status</FormLabel>
                              <Select 
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="MFA Status" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="enabled">Enabled</SelectItem>
                                  <SelectItem value="disabled">Disabled</SelectItem>
                                  <SelectItem value="exempt">Exempt (Approved Exception)</SelectItem>
                                  <SelectItem value="not-applicable">Not Applicable</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name="identityBehaviorHygiene.mfaMethod"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>MFA Method</FormLabel>
                              <Select 
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="MFA Method" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="app">Authenticator App</SelectItem>
                                  <SelectItem value="sms">SMS/Text</SelectItem>
                                  <SelectItem value="token">Hardware Token</SelectItem>
                                  <SelectItem value="biometric">Biometric</SelectItem>
                                  <SelectItem value="card">Smart Card</SelectItem>
                                  <SelectItem value="push">Push Notification</SelectItem>
                                  <SelectItem value="multiple">Multiple Methods</SelectItem>
                                  <SelectItem value="none">None</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                    </div>
                  </div>
                  
                  {/* 8. Security Posture Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">8. Security Posture</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.passwordHygiene"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Password Hygiene</FormLabel>
                            <FormDescription>Last changed, complexity, reuse status</FormDescription>
                            <FormControl>
                              <Textarea 
                                placeholder="Describe password hygiene" 
                                className="min-h-[80px]"
                                {...field} 
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.breachedCredentialChecks"
                        render={({ field }) => (
                          <FormItem className="border p-4 rounded-md h-full flex flex-col justify-center">
                            <div className="flex flex-row items-start space-x-3">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Breached Credential Checks</FormLabel>
                                <FormDescription>
                                  Do you check for breached credentials via services like HaveIBeenPwned?
                                </FormDescription>
                              </div>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.sessionTimeoutSettings"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Session Timeout Settings</FormLabel>
                            <Select 
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select session timeout" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="15min">15 minutes</SelectItem>
                                <SelectItem value="30min">30 minutes</SelectItem>
                                <SelectItem value="1hour">1 hour</SelectItem>
                                <SelectItem value="4hours">4 hours</SelectItem>
                                <SelectItem value="8hours">8 hours</SelectItem>
                                <SelectItem value="24hours">24 hours</SelectItem>
                                <SelectItem value="never">Never (No timeout)</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.unusedAccountDetection"
                        render={({ field }) => (
                          <FormItem className="border p-4 rounded-md h-full flex flex-col justify-center">
                            <div className="flex flex-row items-start space-x-3">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Unused Account Detection</FormLabel>
                                <FormDescription>
                                  Do you detect and manage accounts inactive for 90+ days?
                                </FormDescription>
                              </div>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.privilegeEscalationAlerts"
                        render={({ field }) => (
                          <FormItem className="border p-4 rounded-md h-full flex flex-col justify-center">
                            <div className="flex flex-row items-start space-x-3">
                              <FormControl>
                                <Checkbox
                                  checked={field.value}
                                  onCheckedChange={field.onChange}
                                />
                              </FormControl>
                              <div className="space-y-1 leading-none">
                                <FormLabel>Privilege Escalation Alerts</FormLabel>
                                <FormDescription>
                                  Do you monitor and alert on sudo/root usage logs?
                                </FormDescription>
                              </div>
                            </div>
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  
                  {/* 9. Behavior Monitoring Section */}
                  <div className="border rounded-md p-4 mb-6">
                    <h4 className="font-medium mb-4">9. Behavior Monitoring</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.typicalLoginPatterns"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Typical Login Patterns</FormLabel>
                            <FormDescription>Time, location, device</FormDescription>
                            <FormControl>
                              <Textarea 
                                placeholder="Describe typical login patterns" 
                                className="min-h-[80px]"
                                {...field} 
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.anomalyDetectionFlags"
                        render={({ field }) => (
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0 border p-4 rounded-md">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel>Anomaly Detection Flags</FormLabel>
                              <FormDescription>
                                Do you detect impossible travel, brute force attempts, etc.?
                              </FormDescription>
                            </div>
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.dataAccessTrends"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Data Access Trends</FormLabel>
                            <FormDescription>Unusual file downloads, cloud API calls</FormDescription>
                            <FormControl>
                              <Textarea 
                                placeholder="Describe data access monitoring" 
                                className="min-h-[80px]"
                                {...field} 
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="identityBehaviorHygiene.toolCommandUsage"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Tool/Command Usage</FormLabel>
                            <FormDescription>E.g., PowerShell, RDP, SSH frequency</FormDescription>
                            <FormControl>
                              <Textarea 
                                placeholder="Describe tool/command usage monitoring" 
                                className="min-h-[80px]"
                                {...field} 
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                  

                  <div className="flex justify-end space-x-4">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() => document.querySelector('[value="device-inventory"]')?.dispatchEvent(new MouseEvent('click', { bubbles: true }))}
                    >
                      Previous Step
                    </Button>
                    <Button 
                      type="button"
                      onClick={() => document.querySelector('[value="contact"]')?.dispatchEvent(new MouseEvent('click', { bubbles: true }))}
                    >
                      Next Step
                    </Button>
                  </div>
                </div>
              </TabsContent>
              
